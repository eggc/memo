* 2022/04/17 (日)

- テキストデータを yarn でとれるパッケージにしてしまおう。
- vite ... フランス語なのでヴィートと発音するらしい。vuejs の作者が作った webpack 代替ビルドツール。とても高速。
- vite_ruby は rails にも対応しているらしい。

* 2022/04/13 (水)

- BFF という言葉があるらしい。基本的にはいらないはず。
  https://qiita.com/souhei-etou/items/d5de99bb8cba1c59d393

github で fork したブランチを clone したら fork 元のブランチを取得できない。

#+begin_src
git ls-remote upstrem             #=> Remote ref がいっぱいあるのが見える
git remote show origin            #=> Remote branch がいっぱいある
git remote show upstream          #=> Remote branch が1個しか見えない(release tracked のみ)

git fetch upstream xxx            #=> xxx ブランチは fetch したが FETCH_HEAD にセットされるだけ
git checkout -b xxx FETCH_HEAD    #=> xxx ブランチは checkout できたが追跡できない
#+end_src

なんか動きがおかしいと思って、調べたら config が原因らしい。

#+begin_src
git config remote.upstream.fetch  #=> +refs/heads/release:ref/remotes/upstream/release
#+end_src

この config が勝手に入ったせいで release しか追跡できなくなっていたらしい。
まあ気持ちはわからなくもない。fork して origin で作業してるから普段 upstream を気にすることはない。
でもたまに upstream 参照したいこともあるので、全部追跡するようにしたい。

#+begin_src
git config remote.upstream.fetch "+refs/heads/*:ref/remotes/upstream/*"
git fetch upstrem
#+end_src

これで追跡できるようになった。

* 2022/04/12 (火)

- 生産性指標
  - lean と devops の科学という本
  - google では four keys
    - https://cloud.google.com/blog/ja/products/gcp/using-the-four-keys-to-measure-your-devops-performance
    - https://blog.recruit.co.jp/rls/2021-03-31-four-keys/

* 2022/04/10 (日)

- react on rails は使ってるサービスがわかってしまうらしい。
- webpacker は更新止まって shakapacker になるらしい。
- rust には enum がある
  - enum がメモリを無駄に消費するのを避けるにはスマートポインタを使う。
  - enum で分岐するにはパターンマッチ使う。
- https://kanjialive.com/ すご

* 2022/04/09 (土)

- 0歳児がうまく眠れなくて泣き続ける。寝ても30分ほどで泣き出してしまう。一日中そういう感じだったので夫婦ともども睡眠不足で朝を迎えた。妻が面倒を見てくれたので私はなんとか昼寝をすることができたが、妻の方は寝不足のせいでアドレナリンが出てかえって休めなかったようだ。
- ウクライナのマリウポリでは空爆があり2500人もの民間人が死亡したと言われている。

* 2022/04/03 (日)

- pandoc, playwright が本番環境でインストールできないとか言う話
- docker でやればなんとかなるストレージ2GBくらいは結構使う

* 2022/03/29 (火)

jest でテストするときに1個のテストケースだけを実行したいときは test() を test.only() に書き換えれば良い。
ファイルを書き換えたくない場合は jest -t "キーワード" のように引数指定すればキーワードを含むテストだけが実行される。
https://stackoverflow.com/questions/42827054/how-do-i-run-a-single-test-using-jest

https://typescript-jp.gitbook.io/deep-dive/ これ読んでみようかなあ。

typescript で相対パスで import していると長くなってしまうので良い方法はないのかと調べたら
tsconfig.json で baseUrl と paths いうのを使えば良いらしい。
https://stackoverflow.com/questions/34925992/how-to-avoid-imports-with-very-long-relative-paths-in-angular-2
https://dev.to/ruppysuppy/how-pros-get-rid-of-relative-imports-in-js-ts-2i3f

ts で書いたテストが Cannot find module でエラーを返す。
明らかにモジュールは定義しているので、モジュールのコンパイルに失敗してるのが原因のようだ。
jest が ts を受け取ったときどういう振る舞いをしているのか。
今は ts-jest というパッケージを使ってるので暗黙的にコンパイルしているようだ。
[[https://kulshekhar.github.io/ts-jest/docs/processing][これがフロー]]だけど、ちょっと細かすぎてよくわからない。

jest.config.js というファイルにその設定がある。


コンパイルエラーが出ないか確認するには

#+begin_src
yarn tsc --noEmit hogehoge.ts
#+end_src

みたいな感じで出力出さないフラグつけてコンパイルしたら良い。

* 2022/03/27 (日)

- クリーンアーキテクチャ読む。やっと20章でようやく核心にきた感じ。
- rails6.1 の新機能 delegated type
- 楽天 rapid API ... 個人でAPI提供したり、提供されてるAPIを呼び出したりできる
  - 漢字のよみがなで検索できるAPI https://api.rakuten.net/KanjiAlive/api/learn-to-read-and-write-japanese-kanji

* 2022/03/25 (金)

gh で github 操作するの面白い

#+begin_src bash
# プルリクを作る
gh pr create --base release --draft

# CI が通ってるか確認する
gh pr checks <PULL_REQUEST_NUMBER>

# プルリクレビューを依頼する
gh pr <PULL_REQUEST_NUMBER> ready
gh pr <PULL_REQUEST_NUMBER> edit --add-reviewers <REVIEWERS>
#+end_src


* 2022/03/24 (木)
- snap shot test というのがあるらしい。いいね https://jestjs.io/docs/snapshot-testing
* 2022/03/20 (日)

クリーンアーキテクチャよむかあ。
- https://www.ag-grid.com/ という datatable みたいなライブラリ
- https://react-select.com/ これは select のライブラリ。使ったことある。
- https://github.com/axios/axios で非同期通信
- https://vuex.vuejs.org/ja/ vuex という状態管理方法(redux みたいなの？)
- prime video
  - [[https://www.amazon.co.jp/dp/B08BYZQQTZ][upload]]
  - [[https://www.amazon.co.jp/gp/video/detail/B08BYJL8KY/ref=atv_dp_season_select_s1][the boys]]
- rails application のリファクタリングの参考になるかもしれない
  - https://inside.estie.co.jp/entry/2021/04/07/090000
  - https://qiita.com/kbaba1001/items/e265ad1e40f238931468
  - https://qiita.com/shunjikonishi/items/e39ed8091e1dca817468
  - https://magazine.rubyist.net/articles/0058/0058-ForeWord.html

* 2022/03/18 (金)

- 仕事の中にも、ダークソウルの篝火みたいな安心のできる場所は必要なんだと思う。仲間がいればなお良い。

* 2022/03/15 (火)

- GraphQL の pagination
  - cursor-based pagination というのが最近のはやり
  - cursor-based なら facebook が決めた relay というパターンが有る
  - ruby の graphql-ruby は relay-style で出力できるようになっている。connection_type メソッドを使えば良い。
  - よくある offset-base pagination がしたいなら kaminari を使えば良い。
- apollo studio が一番使いやすい
- grapql はバージョニングできないので変更するときは非推奨にしてから時間を置いて廃止とする
  - https://github.com/xuorig/graphql-schema_comparator これを使うと差分がわかるので破壊的変更に注意を出せる
  - https://github.com/cjoudrey/graphql-schema-linter graphql の schema をちゃんとする
- 仕様書？
  - https://spec.graphql.org/

* 2022/03/13 (日)

- またクリーンアーキテクチャ読むか…。めんど。
- PlannetScale というサービスが有るらしい。MySQL 互換 DB が使えるらしい。Youtube でも使っているとか。スケーリングできる。無料プランもある。マイグレーションのダウンタイムがない？
- 一つのリポジトリを複数のチームで育てているときに、全体的な変更を加えた場合、その変更を受け入れるか判断するためのルールが決まってないのが辛さの原因のような気がする。
- rust
  - タプル型構造体というのがあり、フィールド名がない。これは別名的に使うと良いらしい。
  - 構造体に紐付けられた関数はメソッドとなる。メソッドの引数から self を取り除くとスタティックになる。
- vuejs
  - composition function というのがある。composables ディレクトリに関数をいれる。慣例的に useXxxx という感じにする。その composition function をインポートすればどのコンポーネントからも利用できる。

* 2022/03/09 (水)

- 英語学習のクイズ？ https://quizlet.com/merletlists/folders/engineer-vocabulary-lists/sets

* 2022/03/06 (日)

- クリーンアーキテクチャ読む。
- alfred
  - clipboard history が便利
  - workflow を使えば自動出社 & slack 通知できる
- vuejs の話聞く
  - provide/indect は親コンポーネントの属性を子孫コンポーネントで使えるようにするという機能
    - react global context みたいな感じ
  - teleport はコンポーネントの DOM ツリーをそのまま別のコンポーネントに移し替えれる機能(モーダルで使う)
  - Composition API は setup というメソッドの中にデータと操作を近い場所に書けるようになる([[https://www.ragate.co.jp/blog/articles/9888][紹介記事]])
    - reactive で変更可能な属性を持てる
    - 今まで vue2 で使われてたものは Composition API に変わっていくらしい
- ちょっとしたイベントに参加することになった。やたら緊張する。

* 2022/03/05 (土)

https://qiita.com/Ladicle/items/feb5f9dce9adf89652cf この記事を見てから emacs で nerd font のアイコンを使いたいと思った。ricty + nerd にしたかったけど配布されてなかった。自分でビルドするのは大変だと知っているのでやりたくない。検索でヒットする https://github.com/macchaberrycream/RictyDiminished-Nerd-Fonts これは明らかに古くて、絵文字が足りない。最初、絵文字が足りてないことに気づかなくて、設定が悪いのかと思ってめちゃくちゃ悩んでしまった。

unicode にはプライベート領域というのがあって、何でも使っていいことになってるぽい。たとえば U+E708 は nerd-font では nf-dev-github_alt という名前を持っていて github のアイコン  がアサインされている。しかし上記の URL からダウンロードしてきたフォントはそのアイコンをビルド時に含めてないので文字が見つからなくて emacs のフォールバックが動く。結果よくわからないフォント（おそらく中国語フォント）の U+E708 が表示されるということが起きていた。Emacs ではフォントがないときのフォールバックの仕組みが無駄に凄い。たとえば絵文字 😁 とかは普通のフォントには含まれてない。こういう絵文字は Symbola というフォントを自動的に使うようになっている。無駄に凄いので設定がややこしくて原因を調べるのが大変だった。

* 2022/02/27 (日)

クリーンアーキテクチャ読む。java 前提になってるところが頭に入ってこない。

* 2022/02/26 (土)

Emacs での文字コード/フォントの扱いをシンプルにするため設定をやりなおそう。とりあえずフォントセットの設定を消してみる。手元で describe-char を使ってどのフォントが使われてるか調べてみた。

- アルファベット → Menlo
- ひらがな → ヒラギノ
- 漢字 → PingFang SC

というフォント割当になってるっぽい。実際 describe-fontset で fontset-default の中を見るとそんな感じになっている。これを Ricty に上書きしてみた。まあ一応期待通り動いている。

なんとなく init.el で flycheck を有効にしてみたら use-package マクロで警告がでてしまった。[[https://emacs.stackexchange.com/questions/17627/make-flychecks-reference-to-free-variable-work-with-macros][これ]]と同じ問題だ。 ~straight-use-package~ を使ってるせいで単に ~(require 'use-package)~ と書けばよいはずなのにどこにインストールされてるかわからんことになっていて微妙かも。

* 2022/02/24 (木)

- https://explainshell.com/ でわからないワンライナーとかを分析できるらしくて良いね
- ubuntu のマニュアルで書いてあるのを参照しているらしくて、BSD のコマンドとオプション違うので注意
- Unicode -> character set
- UTF8 -> character encoding schema: Unicode code point <-> bytes

| minimum code points | maximum code points |    byte1 |    byte2 |    byte3 |    byte4 |
|---------------------+---------------------+----------+----------+----------+----------|
| U+0000              | U+007F              | 0xxxxxxx |          |          |          |
| U+0080              | U+07FF              | 110xxxxx | 10xxxxxx |          |          |
| U+0800              | U+FFFF              | 1110xxxx | 10xxxxxx | 10xxxxxx |          |
| U+10000             | U+10FFFF            | 11110xxx | 10xxxxxx | 10xxxxxx | 10xxxxxx |

例： ぱ → unicode code point U+3071 → 3071 -> 0b101111111111 -> 変換表の x にビットを逐次埋めていく -> 11101011 10111111 10111111

仕事用の ssh-key を使っていたら個人用の github アカウントに全く芝が生えないのでなんかその辺いい感じに切り替える方法ないんやろか。
git の署名の所が参照されてるようなので git config local でアカウント切り替えたらいいんじゃなかろうか。
https://qiita.com/0084ken/items/f4a8b0fbff135a987fea この記事をみたらやはりそんな感じがした。

* 2022/02/23 (水)

- 先週読めなかったクリーンアーキテクチャの続き読むか…。
- gh コマンドと jq であそんだ。

* 2022/02/13 (日)

- google analytics/google analytics GA4 (ユーザアクション解析)個別にいれなくても google tag manager を使うと動的に埋め込めて凄い。
- rust はほとんどの文が式で、値を返す。
- https://qiita.com/hinastory/items/543ae9749c8bccb9afbc rust で fizz buzz の色んなパターンを書いてみたという記事。15 通りある。軽い狂気を感じる。
- https://developers.google.com/books ユーザ登録とか無しで本の情報取れるらしい。すごい。
- vuejs で子→親に情報を渡すには emit でイベント発行する。
- ヒューマンバグ大学という youtube チャンネルが有るんだって。

* 2022/02/07 (月)

「今日中にこの問題の原因について明らかにせよ」みたいな強い物言いが営業を通じてプログラマに飛び込んでくることがある。
そういうのを守るのもマネージャーの仕事なのだという。なるほどねえ。

* 2022/02/06 (日)
- nextjs のもっと軽量な vite っていうフレームワークがあるらしい。
- サイドバーがうまく定義出てきてないのが辛いので一旦削除する。
- js のチャンク(code spliting)に意味はあるのか？
  - https://qiita.com/seya/items/06b160adb7801ae9e66f
  - 1個のファイルに bundle してると、なにか一つ更新すると全部更新だがチャンクがあれば差分更新できる
  - CDN とかもそうかも
- vuejs のコンポーネントライブラリ vuefity というのがある。
- 犬画像が取れる API サービス https://dog.ceo/dog-api/ いくらでも犬がとれる。すごい。
- trdsql というのがあって、json のレコードをテーブルインポートしたりできるらしい。すげえ。

js/ts のデバッグをする時にプリントデバッグだけだと辛いのでデバッガを入れたい。
node が提供している方法は、サーバークライアント方式になっていて
debugger を書いたところでプログラムが待ち状態に入る。

#+begin_src bash
node --inspect-brk node_modules/.bin/jest -- tests/File.test.ts
#+end_src

クライアントとして chrome の開発者ツールみたいなのをそのまま使える。
ただわざわざ chrome のウィンドウでなにかするのはあんまり好みではないので他の方法を知りたい。
このめんどくさい設定地獄から抜け出すなら vscode を使うべきなんだろうなってのは思う。
