メモ

* 全体的に

スクラムが目指していることは柔軟性で、それを得るために色々な仕組みを用意しているようだ。
柔軟性の重要な要素として、チームの自己組織化がある。
自己組織化ができていれば、問題が発生した時にチームが自力で対処できる。
問題を自分ごととして、自分の責任として捉えていく能力を持っている人はそう多くない。
多くの人は、会社から与えられている役割とか報酬の範囲でしか活動しない。それが当然だ。
だからそういう枠組みを一度取り払って考え方を変えるような啓蒙活動をしないといけないのだろう。

** 共感できること

- ベロシティは成果にしないほうがいい
  - いくらでも抜け道がある
  - Google Four keys の生産性指標もそうだと思う
- プロダクトバックログに重きを置くことで話をシンプルにしているのは面白そう
- やるべきことが曖昧なままスプリントを走ると手戻りが発生しやすい

** 理想と現実の違い

ポイントはスクラムマスターとプロダクトオーナーのような気がする

- スクラムマスターは、チームの障害を取り除くための行動ができない
  - 技術的な詳細を理解していないため
- スクラムマスターは、プロダクトオーナーの支援はできない
  - 権限や分業体制上それをしないことが通例となっている
- プロダクトオーナーは、バックログをリファインメントしない
- チームの課題をバックログに載せることはできない
  - バックログはプロダクトオーナーに理解できることしか乗ってない
  - 権限がない
  - だから割り込みで直接話しかけて合意を得るしかない
    - 合意が取れるならまだいい
    - 合意取れなかったらときには話がたち消えてしまう
- スプリントレビューに大勢の関係者を呼んでいる(10人以上!)
  - 情報共有を目的としている様子
  - 時間が勿体無いような気がしているが悪いことではないのか？
  - 営業の人とかサポートの人とかいろんな観点からレビューをもらうと良い
- 技術的負債を理由にスプリントを中止することができない
  - よほど致命的でない限りはできない
  - チームスキル的にそういう判断ができない
  - リファクタリング力の不足
- 自己組織化の難しさ
  - 「自分で決める」ができている人はあまりいない
  - 分割統治のほうがいいんではないか

** 試してみてもいいこと

- レトロスペクティブでお菓子を出す
- リリースレゴ
- 技術で困っているときは、シニアにパスしないといけない
- エンジニアとプロダクトオーナーで並び替え
- 簡単なスキルマップ（ドラッカー風エクササイズ）
- リリーススプリント（だんだん減らしていく）

* インセプションデッキ → ゴール

- ゴールが超重要なのでゴールの明示と合意をとる場を持つ
- いきなり集めてもダメなので、プロダクトオーナーを交えて準備
- 草案は持っていくがいきなり提示するより全員に考えさせたほうが良い
- 理由はズレを肌で感じるため
- 最終的には、チームで眺めて自覚的に完成させることが大事
- ついでに不安とかリスクとかも発見する
- 長くとも90分くらい

* プロダクトバックログ → やることリスト

- 決まったフォーマットはない
- 機能・ユーザーストーリー単位で書く
- 機能だけでなく開発都合の内部改善や検証も入れていい
- やってみないとわからない部分があるので詳細までは含めなくていい

作り方

1. いろいろな意見を集めて量を増やす。
   順序付けはプロダクトオーナーだけでなくチームメンバーも交えてやる。
   やるべきことの見落としを減らすため。
2. アイテムに重要度ランク A,B,C をつける
3. アイテムを並び替える。
   チームが自信を持って進められるようにする。
   要望の強さだけでなく、技術的背景も交えて順序付けする。
4. プロダクトオーナーが全体を確認して決定する。

プロダクトバックログは日々見直しが入るのでチームに馴染んでいる必要がある。

* 見積もり

- プロダクトバックログのアイテムに見積もりを入れる
- 見積もりは想定する作業の量を入れる
- 相対見積もりにする

やり方

1. アイテムの作業量ランク A,B,C をつける
2. B ランクの作業量を想像してソートする
3. 中央値を基準値(3や5)に定める
4. 基準と比較して、他のアイテムの相対見積もりを決める
5. フィボナッチ数を使うと、大きなものほど不確かであることを投影できる

複雑でわからないものは「見積もり不能」でもよい。
あまり詳細にやらない。理由は、日々見直して変わっていくものだから。
詳細化は近い未来の数スプリントにする。破算になったとき無駄にならないようにする。

見積もりは「締め切りまでに間に合わせたい」といったバイアスを入れないようにする。
そのためには手を動かしてプログラムを書く人がやるほうがいい。
よくやる見積もりポーカーは初手で他の人に影響されないようにするため。

※ 「当てずっぽうの見積もりでもいいから最大限の努力をしよう」と書いてあるがそれこそ徒労だと思う。
   雑な見積もりはダメで、ある程度詳細に踏み込んだ方がずっと価値が高い。
   それを私は設計と呼ぶ。設計をしないで計画を立てるのは恐ろしい。
   なぜなら、そのアイテムは着手する人によって実装が異なるからだ。
   たとえベテランであっても全体と調和しない設計のアウトプットが出てくることはある。
   ジュニアの場合は悲惨なことになりやすい。そのまま見過ごされると禍根を残す。
   そうなった後に改善しようとするよりは、作る前に設計するほうがコストが少ない。
   設計が変更される恐れはあるけれども、ゼロから設計をやり直すことはそう多くはない。
   アイテムが不要になれば設計も不要だけれども、設計のサンプルとしては役に立つ。
   どう転んでもそこまで無駄にはならないと思う。
   というのをあれこれと友人と話してみた。
   すると、彼のチームでは詳細設計をスプリントプランニングまで遅らせていて、それでもうまくいっているとのこと。
   取り扱っている問題の性質とか、チームメンバーの数によっては遅らせるスタイルがちょうど良いのでは、とコメントを受けた。

* リリース

- リリースに慣れてないならリリーススプリントとして扱った方が無難
- 慣れているなら毎スプリントリリースする
- ベロシティーからリリース予定日を決める
- リリース予定日も変化していく可能性があることに注意
- ずらせない場合は余裕を多めにとって決める

* スプリントプランニング

- ここで詳細設計をする
- アイテムをタスクに分け、予想時間も見積もりする。→スプリントバックログ。
- スプリントゴールは毎回決める。理由は、予定通り進まなかった時の指針とするため。
- 受け入れ条件を決める。デモの手順を想像すると、受け入れ条件を作りやすい。

※ 事前の設計について書いてないのがかなり致命的だと思う。
   実際今のチームも、私が頼むまではかなり雑なプランニングをしていて不安が大きかった。
   着手する人が設計しなければならず、結果的にプロジェクトの全体方針に沿わないことも多かった。
   さらには、設計方針が見えずに右往左往してしまっているケースもみられた。

* デイリースクラム

- スプリントゴールに近づいているか確認する
- 問題を教えてもらう
  - 各自発信してもらう
  - 透明性により他のメンバーの問題に気づく
    - 看板方式にすると、自分以外のタスクも見えて問題に気づきやすいかも
    - バーンダウンチャートとかみると理想通り進んでないときすぐわかる
- 長くても15分
- 問題があればすぐに対策会議を組む

* スプリントレビュー

- 準備し、プロダクトオーナーにデモをする。
- プロダクトオーナー以外も呼んでいい。
- 動くものをみることでバックログアイテムが期待にかなうものだったかがわかる。
- 使いにくいとか機能が足りてないとかがわかればプロダクトバックログを更新する。

事前に完成の定義を決める。たとえば下のような感じ。

- デモができる
- テストがある
- 仕様ドキュメントがある
- リリース可能
