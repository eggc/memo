世界一流エンジニアの思考法

* 第1章 一流の生産性が高いのはなぜか？

- 筆者はマイクロソフトで一流と仕事をしたことがある
- 一流は、筆者がうまく解けない不具合の原因を見つけ一直線に修正した
- 一流は、情報収集→仮説→検証のプロセスが明瞭だった
- 一流は、学習に時間をかける
- コードを書く前に design document を書くとよい
  - scope
  - background
  - problem statement
  - proposal
- 様々な知識のメンタルモデルを持っているとよい
  - 例：MVP(minimum valuable product)
- わからないことは質問して回答を待っている間に他の作業をする
- すぐにはできないが、いつかは自分も一流になれるという自信を持とう

* 第2章 よいマインドセット

- be lazy(より少ない時間で価値を最大化する)
  - 1. 最も重要なもの(KPI)だけに注目して他は無視する
  - 2. タイムボックスの中で成果を出す
  - 3. 会議の準備をしない（※私はダメだと思うが・・・）
  - 4. やることを減らす
- リスクと誤りを受け入れる
  - miserably failed をオープンにする（怯える時間を省略できる）
  - 素早く試してフィードバックを得る（悩む時間を省略できる）
- 不確実性を受け入れる
  - 予定通りリリースするのは不可能、どんなに有名なサービスでも実現できてない
  - Quality, Cost, Dellivery のバランスをとる、多くの場合は D がロックされてる
  - 開発プロセス把握の方法: value stream mapping
  - 残業はしない、無理なら断る
  - 頑張るのではなく、作業量を減らす

* 第3章 情報整理・記憶術

- コードを読むときにインターフェースと構造だけ注目して詳細は踏み込まない
- 簡単な仕事を効率化するのがよい、難易度の高すぎる仕事はやるべきでない
- 成果を焦らないでスキル向上に時間をかける
- マルチタスクはだめ。少なくとも30分は1個のことに集中してから次のタスクに切り替える。
- 1日4時間は連絡を断ち、集中する
- なるべく学んだことを長期記憶に残すレベルに仕上げる
  - コーネルメソッドでノートを書いてみる
- 思考のフレームワークを使う
  - 5W1H
  - MECE
- 逐次メモを書かずに頭の中のバッファに情報をためてから、終わったあとメモを書くように訓練する

* 第4章 コミュニケーション

- 重要なことだけ伝えて、補足情報はなるべく減らす
- 上を実践するために、プレゼン準備は大事
- みる人を意識したメモを取り、質問に答える時に共有する
- プルリクエストを作る時もレビュアーの立場になって、わかりやすいかチェックする
- プルリクエストが進まない時はオフラインで話してもいい
- 1on1 通話を頻繁に使う
- 気軽に質問する、気軽に「わからない」と答える
- agree to disagree(その人が意見に賛同しないことを理解する)
- 意見に反対する時でも、相手を尊重する
- ディスカッションを通じてみんな成長できる（下手でもいい）

* 第5章 チームビルディング

- チームメンバーを管理するのではなくて主体的に動ける体制を作る方が良い
- それには、サーバントリーダーシップが良い
- リーダの言う通りに動いてるチームは弱いので自己組織化したチームが良い
- 楽しく仕事ができるのが一番いい。マネージャはその支援をする。
- 自己組織化のための方法
  - 上司を説得し権限を得る
  - 管理に使う時間を減らしてもらう
  - メンバーをファシリテーションする
- 上下関係を作らない
- 挑戦して失敗するのはいいこと

* 第6章 生活習慣

- 定時働いて、あとは勉強するのがいい（残業はだめ）
- 時間割決めるのは効果的
- 睡眠は7時間以上
- 瞑想で脳を休ませる（？）
- 頭を使わない手作業も良い（楽器の演奏など）
- 完了させることが大事。掃除とかも中途飯場にしない。
- 三十分運動すると気力が湧いてくる

* 第7章 AI

- 身体的なもの、対人的なもの、芸術などはAIより人間が勝る？
- 自分の専門分野でAIと共存するにはどうしたらいいか考える
- 学習データがない先端が人間の仕事
- 動くソフトウェアを作るインテグレーションは人間の仕事
- コロナウィルスの追跡アプリcocoaは悲しい事例
- 日本は完璧主義・批判主義（主語がでかい）
  - （国どうこうよりは、個人でどう成長していくかと言うところにフォーカスしたい）
