[[https://www.ohmsha.co.jp/book/9784274226298/][達人プログラマー 熟達に向けたあなたの旅 （第2版）]] のメモ

* 序文

pragmatic はラテン語 pragmaticus に由来する。これは「実務上の熟達した」という意味。
それ自体はギリシャ語の「行うに適していること」を表す単語に由来する。

第1版が出てから20年が経過したので、古い技術と思想を書き換えて第2版にアップデートした。

大規模なプロジェクトでも、個人の技術とか情熱とかも大事。
自分の能力を少しずつ改善し進歩していくことが大事。

* 第1章 達人の哲学 A Pragmatic Philosophy

あなたの人生
「給料が低い」「テクノロジーが古い」「仕事が退屈」とか不満を抱いているプログラマーは多い。でも、それを変化させるための努力は誰もができるはず。バスの中で勉強したり、条件の合う会社を探したり・・・ここはそれができる業界なので頑張って志を持とう。

*猫がソースコードを食べちゃった*
達人は、プロとして責任を取る。失敗があれば、誤りや無知は認める。いい加減な言い訳をせず可能な限り対処して対策を用意する。そうしてチームメンバーの信頼関係が作られる。信頼関係がなければ良い仕事はできない。筋の通った主張になっているか自分の心と対話しよう。

ソフトウェアのエントロピー
ソフトウェア開発も時間と共に無秩序になる。割れた窓（悪い設計、誤った意思決定、質の低いコード）は修復するべき。さもないとエントロピーが増大してソフトウェアは破綻する。

石のスープとゆでガエル
チームメンバーが協力してプロジェクトに貢献すれば良いものができるが、今忙しいからとリソースを出し渋ることも多い。そうならないためには、理にかなった要求をすること。そして、未来を想像できるような良いものをアウトプットすること。そうすると、渋っていた人も興味を持って、参加したくなる。逆の立場なら、興味に引き摺られて大きな構想を忘れてしまうことがないように注意。

十分に良い(good-enough)ソフトウェア
必ずバグはある。しかしユーザやプログラマー自身を満足させることはできる。そこには技術的な改善とユーザ要求のトレードオフがある。途中で手を止めることも必要。完璧なコードは存在しない。

あなたの知識のポートフォリオ
プログラミングの知識は新しい技術、言語、環境の登場により陳腐化していく。プログラマーが持っている知識をポートフォリオとして管理していくと良い。これは金融ポートフォリオの考え方と似ている。定期的に、分散させて、ハイリスクとローリスクバランス良く投資していくべき。また、利益を最大にするために安く買い、高く売ることに注意し、時にはコストの配分を見直しするべき。より具体的な提案は下記の通り。

- 年に1つの言語を学習する
- 月に1冊は技術書を読む
- 技術書以外の本を読む
- 勉強会や講習をうける
- ユーザーグループに参加する
- 環境を変えてみる（OS やエディタを変えてみる）
- 最先端のニュースや記事に目を通す

一つ注意点として、取り入れた情報を批判的にみるということを忘れないように。メディアには偏見や間違った知識が溢れているので。

伝達しよう！
プログラマーは会議をしたり、聞き取りをしたり、討論をしたり、ドキュメントを書いたり、意思を伝えることに日々時間を割いている。母国語で意思を伝える時、そこにプログラミングの技術を適用する（例えば DRY, ETC などを当てはめてみる）のは、プログラミングの能力を鍛えるユニークな方法と言える。いくつかのアイデアを列挙する。

- 聞き手のことを知る（ニーズ、興味、能力を把握する）
- 言いたいことを知る（自分が伝えたいことを整理してから文章にする）
- タイミングを選ぶ（聞き手が聞きたいと感じるタイミングで話しかける）
- スタイルを選ぶ（聞き手が事実のみを知りたいタイプか、それとも詳細を知りたいタイプかに合わせる）
- 見栄えを良くする（デザインテンプレートや、スペルチェック機能などを使おう）
- 聞き手を巻き込む（ドキュメントの草稿をみてもらってフィードバックを受けよう）
- 聞き手になる（質問したり対話しよう）
- 相手の立場になる（メール等は必ず返事をしよう）
- ドキュメントとコードをまとめる（コードの中にトレードオフや意思決定などを書き込もう）

* 達人のアプローチ A Pragmatic Approach
