「プログラマー脳」の備忘録。
頭の整理のため各節のタイトルは差し替えている。

* part1 コードを読む
** chapter1 コードが読めない原因

| 知識不足 | コードの言語を知らず文法がわからない           | 長期記憶に問題がある         |
| 情報不足 | コードの全容を知らず何をしているのかわからない | 短期記憶に問題がある         |
| 能力不足 | コードが複雑すぎて脳内シミュレーションできない | ワーキングメモリに問題がある |

** chapter2 コードをより速く読む方法

- 短期記憶を節約するにはチャンキングを行う
- チャンキングとは、コードをかたまりで記憶すること
- チェスの序盤の定石と同じような考え方
- デザインパターンは典型的なチャンク
- チャンクをわかりやすくする「ビーコン」としてマークやコメントを置いてもいい


** chapter3 文法を素早く覚える方法

- 記憶は、エビングハウスの忘却曲線に従う
- 全部を覚える必要はないが覚えていたほうが早いこともある
  - ネットで検索していると余計な情報が目について集中が途切れる
- 文法を覚えるのに最適な方法はフラッシュカードらしい
  - つい検索してしまうこと（＝苦手な概念）をやるといい
  - cerego, anki, quizlet などのアプリがある
  - 不正解の回数をメモすると良い
- 長期記憶しても2日経つと25%しか残らない
- 8週間に26回勉強する習慣をつけたグループは1年後に76%記憶が残った
- 記憶能力
  - 貯蔵強度
  - 検索強度
    - ネット検索ですぐ見つかると強化されない
    - 自分の中から引き出そう・思い出そうとすることで強化される
- 精緻化
  - 脳は情報をフォルダでなくネットワークで貯蔵する
  - 自分の信念や知識で整理されたネットワークをスキーマと呼ぶ
  - 情報はスキーマに沿って覚えやすいように少し変形されて記憶される
  - 精緻化とは、不要な情報を削ったり覚えるべきことに合わせてスキーマと情報を最適化すること
    - 自分が詳しいことと結びつける
    - 似ていることがらと結びつける
    - 図を描いてみる

** chapter4 複雑なコードの読み方

- 文法知識があっても難しいものはある
- 脳の能力（ワーキングメモリ）が、コードのシミュレーションに追いつかない
- ワーキングメモリを多く消費するコードは「認知的負荷が高い」と言う
- 変数をメモしたり、記憶補助することである程度なんとかなる
- 認知的負荷が高い問題の性質
  - 解こうとする課題が本質的に難しいもの
  - 課題をモデル化して表現することで難しくなっているもの
- 認知的リファクタリングで改善
  - ローカルでわかるコードに置き換える（ラムダをやめてみるとか）
  - 補助線を引く
    - コードを印刷する
    - 全ての変数を丸で囲み、定義箇所と利用箇所に視線誘導のための線を引く
    - 別のペンを用意して、同じように関数・クラスも線を引く
    - 行ったり来たりがしやすくなる
    - ペンは使ってないけど、個人的に、似たようなことはしている
  - 状態遷移表を書く

* part2 コードをさらに読む
** chapter5 コードを理解を速くする方法

すべての変数を下記のように分類する方法がある（が細かく覚える必要はなさそうである）

| 役割の名前           | 意味                           |
|----------------------+--------------------------------|
| ステッパー           | イテレーターを持つ変数         |
| フラグ               |                                |
| ウォーカー           | より抽象的なステッパー         |
| 直近の値の保持者     | なにかを取り出した値を持つ変数 |
| 最も重要な値の保持者 | 目的とする計算結果を持つ変数   |
| 収集者 gatherer      | 総和などを持つ変数             |
| コンテナ             |                                |
| フォロワー           |                                |
| オーガナイザ         |                                |
| テンポラリ           |                                |

- 学生がプログラミングを学ぶのにこれを使う研究がなされていて、良い結果が出ているらしい。
- ハンガリアン
  - hoge_str とか、ハンガリアン記法が隆盛だったが後からIDEで型確認が容易になってから不要になった。
  - hoge_col (列インデックス)とか、よりセマンティックな型を表現したアプリケーションハンガリアン記法は今でも有効。
  - (Meta-Programming: A Software Production Method) という論文に書いてあるらしい。
- プログラムの「文章の理解」と「計画の理解」は違う（※設計理解的なことだと思う）
- より深いコード理解のステップ
  1. フォーカルポイント（エントリポイントや、エラー発生行）を見つける
  2. フォーカルポイントの関連コードを読み、知識を拡張する
  3. 概念を理解する
  4. 横断的な概念を理解する
- コードを読む時間が60%
- コードを読む時、自然言語の文章を読む時と同じ部分の脳が活性化する
- 数値計算のスキルはプログラミングとは相関が低いという研究がある
- 文章を読むスキルは7つあるのでこれをプログラミングにも応用できる

| 文章を読むスキル             | プログラミングでの実践                 |
|------------------------------+----------------------------------------|
| 過去の知識との結びつけ       | 5分〜10分で全体像をみる                |
| 文章の理解度の自己確認       | 印刷して理解できない行にマークをつける |
| 重要な文とそうでない文の区別 | 印刷して重要な行にマークをつける       |
| 推論                         | 変数の役割リストを作る                 |
| 作図・可視化                 | 手書きの図、状態遷移図、トレースなど   |
| 自問自答                     | なぜそういうコードになってるか考える   |
| 要約                         | まとめると、ドキュメントになる         |

** chapter6 コードの問題を早く解決する方法

- 技術的な意思決定の機会はたくさんあるし、考えるべきこともたくさんある
- 普通、人は解こうとする問題からモデルを作る
- モデルによって解き方が難しくなる
- 頭の中にあるのはメンタルモデル
  - 不完全・柔軟
  - 変化する
  - 矛盾することもあるが、使い分けれる
- 短期記憶に読もうとしているコードのメンタルモデルを置くとよい
- 長期記憶にはアーキテクチャ、デザインパターンなどのメンタルモデルを置くとよい
- 想定マシン・仮想マシン(notional machine)とは理想化されたコンピューター
- 完全なメンタルモデルは想定マシンと一致するが効率は悪い
  - 一致してなくても考えやすい方が良いかもしれない
  - 例えば、変数は「箱」としてとらえる
  - ただしそうすると、変数は1個の値しか持てないことを見落としやすくなる

** chapter7
