https://www.oreilly.co.jp/books/9784873118482/


* 1. マネジメントされる立場
** 1.1 マネージャーをうまく使う方法

- 1on1
  - 少しのプライベート
  - 話したいテーマを事前に持っていく
- フィードバックをもらう
  - 良い点の賞賛
  - よくない点の苦言
- 打ち明ける
  - 人間関係の相談
  - 出世したいことの相談
  - つまらない仕事の意義をたずねる
- 許可を得る
  - カンファレンス参加や書籍購入の補助
  - 部署連携の方法を尋ねる

** 1.2 マネジメントのされ方

- 望んでいることを自己分析して伝える
- 自分のことを自分の責任で決める
- マネージャーにアドバイスを求める（敬意の表現でもある）
- 不安・不満・昇給の要求なども伝える
- マネージャーも失敗するし、複数のマネジメントをしているので忙しい
- エンジニアとしての優秀さは必ずしもマネージャとしての優秀さではない

自己診断リストを使ってあり方を考えてみよう

* 2. メンタリング
** 2.1 新人教育

- メンタリングは、教える側も教わる側も良い機会
- インターンには、期間と難易度を考えてほどよいプロジェクトを与える
- マイルストーンを決め、プロジェクトマネジメントの練習と考える
- 会話が得意な人ばかりではない
  - 繰り返し伝える
  - 言葉以外にも気を配る
- お互いにとって有益なので、組織で定められてない非公式なメンタリングをやってもいい
- アルファギークはブリリアントジャークみたいな感じになるので危ない
- そうならないためには、人の意見を認めたり賞賛することが必要
- そういう人もいていいが、リーダーやマネージャーには向いてない
- 同じ職務をしている人がメンターをやるべき
- メンタリングを雑務に含めないで、目的を持った業務の一つと考えるべき

* 3. テックリード
** 3.1 ポイント

扱う課題が広がるため時間管理が難しくなる。
スケジュールに注意する。

** 3.2 基礎知識

プロジェクトに従属している場合は、プロジェクトを成功に導くことが責任となる。システムアーキテクト、ビジネスアナリスト、プロジェクトマネージャー、チームリーダー、プログラマーなど状況に応じて色々な役割を果たす。求められるスキルも多様になる。

- プロダクトの理解
  - コードや設計の理解
  - ビジネスの理解
- ソフトウェア設計スキル
- 要件整理スキル

** 3.3 プロジェクトの管理

（プロジェクトマネジメントは大変）

** 3.4 プロジェクトマネジメントの業務の紹介

（プロジェクトマネジメントの業務内容）

** 3.5 テックリードが向き合う課題

技術者としての課題：たとえそれに相応しい能力を持っていても、自分にしかできないプロジェクトが存在して、それを解決し、昇進するということはあまりない。新しい技術を使ったりアイデアを導入することはあまり望まれないことも多い。組織にとって価値があるということを説得することにも多くの時間を割かなければならない。主導権争いに巻き込まれやすい。ただ、工学的問題と向き合う時間は長い。

マネージャーとしての課題：依頼や指示をしてもなかなか思い通りに人が動かない。悪いニュースを伝えたり、励ましたりする1on1やフィードバックの難しさ。上司は期待通りの人材を配置してくれない。

** 3.6 プロセスへの固執

何かうまくいかないことがあるとプロセスを細かく見直してルールを立てていくのは必ずしも最善策とはいえない。柔軟性のあるプロセスに変えて行ったほうがうまくいくことが多い。

** 3.7 テックリードへの期待

- アーキテクチャを理解している：機能がどのように実現されているか、データの流れや相関図などが頭の中にある。
- チームプレイができる：自分で作業してばかりはよくない。退屈な作業や困難な作業を引き受ける。モチベーションのために、面白い作業もたまには引き取ろう。
- 技術的な意思決定に関与する：独断で決めるのはよくないし、チームがやるのに任せっぱなしもダメ。
- コミュニケーション：チームの生産性に寄与するための会話や情報伝達をする

* 4. 人の管理
** 4.1 直属の部下について

- マネジメントのされ方について好む傾向について聞いてみる
  - ネガティブフィードバックがあるときどう伝えて欲しいか
  - ポジティブフィードバックがあるときどう伝えて欲しいか
  - やりたいこと
  - やりたくないこと
  - 絶対に嫌な上司の行動
  - キャリアアップの目標
- 期待を伝える
- 1ヶ月,2ヶ月,3ヶ月計画を立ててもらう
- 新人の仕事はドキュメントの改善と修正
- 新人の意見や感想はなるべく多くもらう

** 4.2 チーム

- 週1回1on1をやる、多すぎると感じたら減らす
- うまくいっている人も、うまくいってない人も、どちらも時間を使う

** 4.3 1on1

いろいろなやり方がある

- TODO リスト型
  - 議題リストを持っていく
  - 会話で伝えたいトピックを選ぶように気をつける
- キャッチアップ型
  - 話をしてもらう・情報をもらう
  - 愚痴は改善策につなげる
- フィードバック型
  - 仕事の改善のためにどうするべきかを伝える
  - 文章を使ったりもする
  - トラブルを起こした時はこの方式でやる
- 経過報告型
  - プロジェクトの話をする
  - 時間の無駄なので変えたほうがよい

注意すること

- 相手を知るための機会なので、家族とかの話も喜んで聞くようにする
- その人を応援する関係になれるようにする
- 散歩しながら・食事しながらやるのもあり
- 共有ドキュメントを作るべき（上司が書記をやる）

** 4.4 いろいろなマネージャー

- 能力不足の場合はマイクロマネジメントでもいい
- 優秀な人にそれをやると著しくやる気を下げる
- 責任を分配することと、信頼すること、アウトプットを管理することが大事
- 裁量が与えられている状態をオートノミーという

** 4.5 マネジメントのプラクティス

- チームがゴールに進んでいるなら問題ない
- そうでないならゴールと計測方法を見直させる
- マネージャーがメトリクスをみたり、勝手に情報を取りに行ってもいい
- 最初と最後の期間にはマネージャーは大きくかかわるとよい
- 途中の期間で順調なときは手出ししない
- 個人の遅れは報告し、チームで解決できるような文化を根付かせる

** 4.6 普段から褒める

- 良い点も悪い点も、なるべく早く、継続的に伝える
- 事前にメンバーのことを知る、1on1で聞く
- メンバーをしっかりみる
- 良い点をしっかり伝える（そこを省略してすごくモチベーションを落としていた人がいた）
- 昇進を望んでいる人には、どうすればさらに良くなるかを伝える

** 4.7 人事評価

- 主観に陥りやすいので360度評価みたいな方法を使うと良いかもしれない
- 集めた情報を要約する、時間をかける
- 短期のできごとに囚われずに、過去1年と比較して評価する
- 褒めに長く時間を使う
- 360度評価の場合は、ネガティブフィードバックを安易に伝えずに妥当かどうかを考える
- 改善のフィードバックがない場合は、昇進させるか、さらに難しい仕事を与えるべき
- 大事な時間なので、事前に渡せる内容は渡してから、一緒に読み合わせをすると良い

** 4.8 昇進の方法

- メンバーは自分の実力と実績を証明するための証拠集めをする
- マネージャーはそれを支援する
- 正規の手続きを知っておく必要がある
- ピーターの法則
  - 昇進すると仕事の内容が変わってしまうため、それまでの実績があてにならない
  - 昇進する前から、昇進後の業務内容を行うべき

** 4.9 成績不振者の解雇

- 期待に答えられていないことを伝える
- 改善の方法を伝える

* 5. チームの管理

- チーム全体の見守りをすることについて

** 5.1

プロジェクトの問題点を掴むためにはスキルの維持が必要なのでコーディングも続けたほうがいい

** 5.2 チームが機能不全になったとき

- ペインポイントを探して対応する
- 人間関係に問題がある場合は話し合う
- 他のチームと協力が必要なら自分から歩み寄る

** 5.3

- ときには盾になることは必要だが過保護な親になる必要はない

** 5.4 意思決定

- データを重視する
- ユーザフォーカス
- 将来のことを考える
- 振り返りをする

** 5.5 ポイント

- 多数決で責任を回避するのではなく、責任を負って決断をする
- 嫌なことに目をむける
- 大事な問題以外は気にしない
- 親切にする
- 勇気を出す

** 5.6 チームの力を損なう人たち

- ブリリアントジャーク
- 秘密主義者
- その他

** 5.7 プロジェクトマネジメント

- アジャイルの方が楽（？）
- 納期を守る努力をする
- 見積もりに時間をかける
- 転職してきた場合はマネジメントよりキャッチアップから
* 6. 複数チームの管理
