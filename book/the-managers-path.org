https://www.oreilly.co.jp/books/9784873118482/

* 1. マネジメントされる立場
** 1.1 マネージャーをうまく使う方法

- 1on1
  - 少しのプライベート
  - 話したいテーマを事前に持っていく
- フィードバックをもらう
  - 良い点の賞賛
  - よくない点の苦言
- 打ち明ける
  - 人間関係の相談
  - 出世したいことの相談
  - つまらない仕事の意義をたずねる
- 許可を得る
  - カンファレンス参加や書籍購入の補助
  - 部署連携の方法を尋ねる

** 1.2 マネジメントのされ方

- 望んでいることを自己分析して伝える
- 自分のことを自分の責任で決める
- マネージャーにアドバイスを求める（敬意の表現でもある）
- 不安・不満・昇給の要求なども伝える
- マネージャーも失敗するし、複数のマネジメントをしているので忙しい
- エンジニアとしての優秀さは必ずしもマネージャとしての優秀さではない

自己診断リストを使ってあり方を考えてみよう

* 2. メンタリング
** 2.1 新人教育

- メンタリングは、教える側も教わる側も良い機会
- インターンには、期間と難易度を考えてほどよいプロジェクトを与える
- マイルストーンを決め、プロジェクトマネジメントの練習と考える
- 会話が得意な人ばかりではない
  - 繰り返し伝える
  - 言葉以外にも気を配る
- お互いにとって有益なので、組織で定められてない非公式なメンタリングをやってもいい
- アルファギークはブリリアントジャークみたいな感じになるので危ない
- そうならないためには、人の意見を認めたり賞賛することが必要
- そういう人もいていいが、リーダーやマネージャーには向いてない
- 同じ職務をしている人がメンターをやるべき
- メンタリングを雑務に含めないで、目的を持った業務の一つと考えるべき

* 3. テックリード
** 3.1 ポイント

扱う課題が広がるため時間管理が難しくなる。
スケジュールに注意する。

** 3.2 基礎知識

プロジェクトに従属している場合は、プロジェクトを成功に導くことが責任となる。システムアーキテクト、ビジネスアナリスト、プロジェクトマネージャー、チームリーダー、プログラマーなど状況に応じて色々な役割を果たす。求められるスキルも多様になる。

- プロダクトの理解
  - コードや設計の理解
  - ビジネスの理解
- ソフトウェア設計スキル
- 要件整理スキル

** 3.3 プロジェクトの管理

（プロジェクトマネジメントは大変）

** 3.4 プロジェクトマネジメントの業務の紹介

（プロジェクトマネジメントの業務内容）

** 3.5 テックリードが向き合う課題

技術者としての課題：たとえそれに相応しい能力を持っていても、自分にしかできないプロジェクトが存在して、それを解決し、昇進するということはあまりない。新しい技術を使ったりアイデアを導入することはあまり望まれないことも多い。組織にとって価値があるということを説得することにも多くの時間を割かなければならない。主導権争いに巻き込まれやすい。ただ、工学的問題と向き合う時間は長い。

マネージャーとしての課題：依頼や指示をしてもなかなか思い通りに人が動かない。悪いニュースを伝えたり、励ましたりする1on1やフィードバックの難しさ。上司は期待通りの人材を配置してくれない。

** 3.6 プロセスへの固執

何かうまくいかないことがあるとプロセスを細かく見直してルールを立てていくのは必ずしも最善策とはいえない。柔軟性のあるプロセスに変えて行ったほうがうまくいくことが多い。

** 3.7 テックリードへの期待

- アーキテクチャを理解している：機能がどのように実現されているか、データの流れや相関図などが頭の中にある。
- チームプレイができる：自分で作業してばかりはよくない。退屈な作業や困難な作業を引き受ける。モチベーションのために、面白い作業もたまには引き取ろう。
- 技術的な意思決定に関与する：独断で決めるのはよくないし、チームがやるのに任せっぱなしもダメ。
- コミュニケーション：チームの生産性に寄与するための会話や情報伝達をする

* 4. 人の管理
** 4.1 直属の部下について

- マネジメントのされ方について好む傾向について聞いてみる
  - ネガティブフィードバックがあるときどう伝えて欲しいか
  - ポジティブフィードバックがあるときどう伝えて欲しいか
  - やりたいこと
  - やりたくないこと
  - 絶対に嫌な上司の行動
  - キャリアアップの目標
- 期待を伝える
- 1ヶ月,2ヶ月,3ヶ月計画を立ててもらう
- 新人の仕事はドキュメントの改善と修正
- 新人の意見や感想はなるべく多くもらう

** 4.2 チーム

- 週1回1on1をやる、多すぎると感じたら減らす
- うまくいっている人も、うまくいってない人も、どちらも時間を使う

** 4.3 1on1

いろいろなやり方がある

- TODO リスト型
  - 議題リストを持っていく
  - 会話で伝えたいトピックを選ぶように気をつける
- キャッチアップ型
  - 話をしてもらう・情報をもらう
  - 愚痴は改善策につなげる
- フィードバック型
  - 仕事の改善のためにどうするべきかを伝える
  - 文章を使ったりもする
  - トラブルを起こした時はこの方式でやる
- 経過報告型
  - プロジェクトの話をする
  - 時間の無駄なので変えたほうがよい

注意すること

- 相手を知るための機会なので、家族とかの話も喜んで聞くようにする
- その人を応援する関係になれるようにする
- 散歩しながら・食事しながらやるのもあり
- 共有ドキュメントを作るべき（上司が書記をやる）

** 4.4 いろいろなマネージャー

- 能力不足の場合はマイクロマネジメントでもいい
- 優秀な人にそれをやると著しくやる気を下げる
- 責任を分配することと、信頼すること、アウトプットを管理することが大事
- 裁量が与えられている状態をオートノミーという

** 4.5 マネジメントのプラクティス

- チームがゴールに進んでいるなら問題ない
- そうでないならゴールと計測方法を見直させる
- マネージャーがメトリクスをみたり、勝手に情報を取りに行ってもいい
- 最初と最後の期間にはマネージャーは大きくかかわるとよい
- 途中の期間で順調なときは手出ししない
- 個人の遅れは報告し、チームで解決できるような文化を根付かせる

** 4.6 普段から褒める

- 良い点も悪い点も、なるべく早く、継続的に伝える
- 事前にメンバーのことを知る、1on1で聞く
- メンバーをしっかりみる
- 良い点をしっかり伝える（そこを省略してすごくモチベーションを落としていた人がいた）
- 昇進を望んでいる人には、どうすればさらに良くなるかを伝える

** 4.7 人事評価

- 主観に陥りやすいので360度評価みたいな方法を使うと良いかもしれない
- 集めた情報を要約する、時間をかける
- 短期のできごとに囚われずに、過去1年と比較して評価する
- 褒めに長く時間を使う
- 360度評価の場合は、ネガティブフィードバックを安易に伝えずに妥当かどうかを考える
- 改善のフィードバックがない場合は、昇進させるか、さらに難しい仕事を与えるべき
- 大事な時間なので、事前に渡せる内容は渡してから、一緒に読み合わせをすると良い

** 4.8 昇進の方法

- メンバーは自分の実力と実績を証明するための証拠集めをする
- マネージャーはそれを支援する
- 正規の手続きを知っておく必要がある
- ピーターの法則
  - 昇進すると仕事の内容が変わってしまうため、それまでの実績があてにならない
  - 昇進する前から、昇進後の業務内容を行うべき

** 4.9 成績不振者の解雇

- 期待に答えられていないことを伝える
- 改善の方法を伝える

* 5. チームの管理

- チーム全体の見守りをすることについて

** 5.1

プロジェクトの問題点を掴むためにはスキルの維持が必要なのでコーディングも続けたほうがいい

** 5.2 チームが機能不全になったとき

- ペインポイントを探して対応する
- 人間関係に問題がある場合は話し合う
- 他のチームと協力が必要なら自分から歩み寄る

** 5.3

- ときには盾になることは必要だが過保護な親になる必要はない

** 5.4 意思決定

- データを重視する
- ユーザフォーカス
- 将来のことを考える
- 振り返りをする

** 5.5 ポイント

- 多数決で責任を回避するのではなく、責任を負って決断をする
- 嫌なことに目をむける
- 大事な問題以外は気にしない
- 親切にする
- 勇気を出す

** 5.6 チームの力を損なう人たち

- ブリリアントジャーク
- 秘密主義者
- その他

** 5.7 プロジェクトマネジメント

- アジャイルの方が楽（？）
- 納期を守る努力をする
- 見積もりに時間をかける
- 転職してきた場合はマネジメントよりキャッチアップから
* 6. 複数チームの管理
*** 6.1 時間の管理

- いろんな会議で忙しい
- コーディングの腕を落とさないように
- 管理職にクイックウィンはない
- 重要度と緊急度のマトリクス
- ミーティングの参加者がぼーっとしているなら時間の浪費

*** 6.2 人に任せる

- 部長になったばかりのときは皿回しをしているようなもの
- どれも適切な回転数がないと落ちるので色々気配りする疲れる
- ある程度人に任せたいが全部任せてはダメ
- 会議はメンバーやプロジェクトの健全性を知るために必要
- 単純で頻度が多い仕事を人に任せる
- 順調なら複雑な仕事も少しずつ訓練して任せるようにする

*** 6.3 仕事の断り方

- 単に仕事を断るより、リスクやデメリットが大きいことを説明し取り下げてもらう
- ポリシーをあらかじめつたえておき、断るべき仕事が来ないようにする
- 質問を重ねて、アイデアの不完全さに自分で気づいてもらう
- 同僚や他部署の賛成者を巻き込み議論を補強する

*** 6.4 技術の健全性をみるスキルが必要

*** 6.5 自分のチームの健全性

- 健全性の指標
  - リリースできない
  - 不具合が多い
  - 開発が遅い
- その場合はプロセスとか責任範囲とか色々見直す
- チームに全力を出せる課題を与える

*** 6.6 事例

- イングループ
  - 「イングループ」心理学的に排他的なグループ。
  - イングループは、リーダーへの依存が強いので作らない方がよい。
  - イングループは、グループ外のアイデアを受け入れない。
- 良いチーム
  - 今ある長所を伸ばす
  - 目的意識が強く、皆で共有している
  - 目的のためなら、変化を受け入れる

*** 6.7 大事なことだけやる

- 効率が悪いと考えたら、その理由や改善策を探る
- 残業はなるべくしないお手本になる
* 7章 複数管理者の管理

- 複数チームの管理とそう変わらない
- 階層化したことで、手の届くところに情報はない
- 問題が起きた時だけ介入したいが、問題が起きたことに気づくのはかなり遅い
- 相談しに来いといっても来ないのが普通

** 7.1 リーダーを飛び越えて面談する（スキップレベルミーティング）

- スキップレベルミーティングは必要
- 4半期に一回、ランチでもいい
- 働いてる人たちはリソースではなく、生身の人間だということを知る
- 話を引き出す問いかけの例
  - 最悪なこと・最高なこと
  - メンバーの中ですごいと思う人
  - 上司について、上手くいってること、うまくいってないこと
  - 私に支援してほしいこと
- 信頼関係を構築できる
- 問題を隠している管理者の対策になる

** 7.2 責任を与える

- 管理者に責任を与えていく
- 管理者の管理者は、難局を救う責任がある

** 7.3 イエスマンをどうするか

- 悪い管理者(イエスマン)
  - 慕われている
  - 話を聞くが、行動を起こさない
  - セラピストのようになってしまっている
  - 常に忙しそうなので責められない
  - いいやつなので憎めない
- チームを成長させるのが良い管理者
- イエスマンはノーと言えるように指導する

** 7.4 ジュニア管理者

- 1on1やることを依頼する
- スキップレベルミーティングする
- マイクロマネジメントをさせない

** 7.5 ベテラン管理者

- 抜擢するときは、文化に合うかどうかが最も大事
- 教えを求める場面もあるが、指示を与える場面もある対等性
- 人脈を広げる機会を提供する

** 7.6 中途採用

- エンジニアの能力は測定しやすいが、マネージャーの能力は判断が難しい
- 能力の確認
  - 模擬的な1on1をやって、能力を見る
  - チーム課題をいかに解決したかを問いかける
  - 哲学・ポリシーを問いかける
  - プレゼンテーションを実演してもらう
  - 過去の技術的決定とトレードオフについて問いかける
- カルチャーの確認
  - 管理者自身がカルチャーを理解する
  - 異なる文化を持ち込むことで成功することもあるが破綻することもある
  - 文化は極めて曖昧な状況下で決定を下すヒントになる
  - 候補者を知る人にインタビューする


** 7.7 組織のデバッグ

- 管理者からみたチームは入出力があるブラックボックス
- 問題の原因に対して仮説をたてる
- チームのアウトプットを見る（ログ、チャット、課題管理チケットなど）
- ミーティングに出席して健全性を確認する
- メンバーがチームの目標を知っていて納得しているか確認する
- 人間関係のチェック
- 未知の領域を管理することになったとしても、そのことに興味を持つようにする

** 7.8 見積もり

- 遅れを指摘・批判されることは多い
- アジャイルでも見積もりした方がいい場面は多い
- 見積もりはチームに習慣化する
- 必要なときには機能を削減する。そしてその責任を取る

** 7.9 計画変更・ロードマップ変更

- 事業計画の変更が少ない半期の間で目標を決める
- プロジェクトを分割して成果を出しやすくする
- 面白いことを「いつかやる」と言うのは失望させやすい
- 時間の２割はメンテナンス作業に使う
- プロジェクトの存在価値を正当化する
- 異動に対してはスムーズにできるように支援

** 7.10 最新技術を追いかけ、技術力を維持する

- なぜ技術力を維持する必要があるか
  - 技術選定を誤らないように監視する
  - 技術と事業のトレードオフを判断可能にする
  - ただの連絡役では不十分
- 情報収集の方法
  - 部下に調査を依頼して情報収集する
  - プルリクエストやコードを読む
  - 障害のポストモーテムに同席する
  - ニュース、ブログを読む
  - 人脈を作る、人脈から情報をもらう

* 8章 経営幹部

経営幹部に必要なこと

- 十分な情報が得られてなくても決断し責任を負う
- 事業把握と将来を予想し計画を立案する
- 組織構造を理解し管理体制を作る
- 技術系・非技術系とわず協力して力を借りる
- 論理的に異を唱えるが、決定には従い成果を出す

主な仕事

- 情報収集・共有する
- 注意喚起する
- 意思決定する
- 行動で規範を示す

** 8.1 幹部の責任の種類

会社によって異なるので汎用的なモデルはないがいくつかの例を示す。

- 研究開発
- 技術戦略・ビジョンの提示
- 組織作り
- 執行責任
- 広報・顔役
- インフラ運用
- 事業化

** 8.2 VPoE

部署のCTOに相当する。
部下の開発プロセスを理解し把握している。
上流で示されたアイデアやビジョンを実現することに努める。
人材発掘や人材教育にも関わることがある。
現場から技術的な信頼を受けている必要がある。

** 8.3 CTO

技術職の最高位というわけではない。責任も千差万別。
長期的視点に立って、事業の未来を計画する。
目標のために注力することが変わるので常に技術だけをみているわけではない。
部下の管理をVPoEに任せてしまうこともあるが名ばかりになるようではだめ。
人を動かし事業に良いインパクトを与えるような行動をしてなければならない。

** 8.4 優先順位の変更

なにか割り込みで仕事をさせたい（させられそう）なら、
今やってる仕事の状況を最大限把握するようにつとめる。
重要なことは何かを説明し続ける。何度でも言うしメールもする。

** 8.5 戦略の策定

1. データ収集：広範な調査、ペインポイントの発見、将来性の検討
2. アイデアの整理：データをもとに色々アイデアを出してグループ分けする
3. 草案作成：戦略の草案を作る、長期ロードマップも含める
* 9章 文化

構造や工程が必要。これらを嫌っているスタートアップもある。
スタートアップはフラットな組織を作りがち。
構造を持たないと破綻するか暗黙的な構造が生まれてしまう。

** 9.1 自分の役割を見つける

- 社員の数・創業年数・ITインフラ規模・業界のリスク許容度で、会社の船の大きさがわかる
- ゴールの法則：大きな組織構造を作るよりも、小さな組織構造を作り拡張するべき
- 小さな組織構造を作り、失敗や不具合を元に拡張・改善していくといい
- 他の組織の教訓がそのまま別の組織で活かされるとは限らないのでいきなり大きな組織構造を作ってはダメ
- 組織の不具合の例
  - 新入社員が軌道に載るのが遅い → 研修プロセスを改善
  - 昇進や昇給に対する不満や離職 → キャリアパス・キャリアラダーの見直し
  - 操作ミスによる障害 → 操作の手順書、自動化、権限などの見直し

memo: 構造にインパクトを与える仕事はできてたのかも。
SSoT, Quest, CodingRule, TechTalk

** 9.2 文化とは

- 会社の価値観＝文化＝暗黙のルール＝行動規範
- 浸透させることはリーダーの役割
- 結束の材料
- 決断の材料

** 9.3 文化を作る(1)

- 会社の文化の下に、部門の文化を作ってみる
- 文化に従っている人を褒める・エピソードの共有
- 評価面談でも文化に触れながら評価する
- 採用面接で文化に会うかどうかを見ようとすることもあるが困難
  - そこをみたいなら明確な基準を作る

** 9.4 文化を作る(2)

- ゼロから文化を作るのはとても困難
- 他社事例を真似して大失敗することもある

** 9.5 キャリアラダー

- チームメンバーにも情報提供してもらい納得感を出す
- 他社事例をさらに沢山集めてヒントにする
- 詳細な表現を使う、要約版も用意する
- キャリアの初期段階は給与幅を狭くして昇進しやすくする
- キャリアの上位は給与幅を広くする
- 目標とするべきキャリアの目安を決める
- 管理系と技術系のキャリアパスは分ける
- 上級キャリアの制限に長期プロジェクトの完遂といったものを入れてもいい
- リリース後も修正する

** 9.6 クロスファンクションチーム

- 筆者はかなりうまくいった
- プロダクト志向になるが技術効率は落ちる
- マネージャーは変えない（元の部門のまま）

** 9.7 開発プロセス

- CI とかチケットトラッキングとか
- 上層部から命令があってやるだけだと辛い
- 開発プロセスは、プロジェクト進行途中のリスクを見えるようにする
- 完璧に従わなくても機能するものにするべき

** 9.8 意思決定

- コードレビュー memo: 以前作ったポリシーを整えよう
- ポストモーテム
- アーキテクチャレビュー
