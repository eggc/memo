https://www.ohmsha.co.jp/book/9784274224546/

Martin Fowler の訳本。https://bliki-ja.github.io/ にも色々ある。
このメモは、すべて自分の感想に置き換えているので、内容は同じではない。

* 第1章 リファクタリングの例

リファクタリングするのは、機能追加のしやすさ、コードのわかりやすさのため。テストは必須。
パフォーマンスは気にする必要がないことも多い。ループを2回回してもいい。
少しずつ変更を加えてテストを行うことで、確実に前進する。

条件分岐をクラス継承で置き換えるというのが印象的。
これを大幅な書き直しではなくて徐々に変化させていくのはすごいことだと思う。
コードの長さは増えているが、概念的な複雑さは整理されていて注目する事柄によって少ないコード理解で済むようになってる。

* 第2章 リファクタリングの原則

リファクタリングの定義：

#+begin_src
名詞：外部から見た時の振る舞いを保ちつつ、理解や修正が簡単になるように、ソフトウェアの内部構造を変化させること
動詞：一連のリファクタリングを適用して、外部から見た振る舞いの変更なしに、ソフトウェアを再構築すること
#+end_src

機能追加はせず維持する。バグさえも維持する。あとで直すことはあるかもしれない。
リファクタリングがあれば、最初に優れた設計がなくても、後から構造を立て直せる。
ほとんどのリファクタリングは機能追加の前にやる。
マネージャーがリファクタリングの重要性を理解することは難しくない。
ただ彼らを説得することは必ずしも必要ではない。勝手にリファクタリングして問題はない。
書き直したほうがマシなこともある。リファクタリングしないという選択肢もある。

リファクタリングは経済効果のために行われるもので、美的感覚のために行うものではない。

パフォーマンスが落ちた時、計測する前から推測するのはやめようという話が書いてある。
LSPやその他ツールによってリファクタリングするのも良い選択。手作業より安全かつ短時間で実行できる。

* 第3章 不吉なコード・コードスメル

- 名前がおかしい
- コードの重複
- 長い関数
- 引数が多い
- グローバルなデータ
- ミュータブルなデータ
- 色々な変更を行う関数
- オブジェクトの強い依存
- 似ているデータが散在している
- プリミティブ型のみで計算している
- 複雑な分岐
- ループ
- 役割がない・薄いオブジェクト
- 過剰な一般化
- 一時的な属性
- メッセージチェーン
- 過剰な委譲
- 過剰なメッセージ（強烈な依存）
- クラスが長い
- クラスのインターフェースが違う
- get/set しかないクラス
- いらない機能を継承しているクラス
- コメント

* 第4章 テスト

リスクがあるものをテストしよう。そうでないものまでテストしていると混乱が起きやすい。

- setup
- execute
- verify

テストコードを通じて、仕様の検討が不足していた箇所を見つけられることがある。

* 第5章 リファクタリングのカタログの事前解説

省略

* 第6章 リファクタリングのカタログ1 - はじめの一歩

さまざまなリファクタリング手法を背景や事例とともに紹介している。
大部分は省略して初見、印象に残ったものだけメモ。

** Combine functions into transform

オブジェクトに属性を追加する。

def enrich(user)
  RichUser.new(user.dup)
end

rich_user = enrich(user)

みたいな感じ。ものが変わるときは

team = user.transform_to_team

みたいな感じ。

* 第7章 リファクタリングのカタログ2 - カプセル化

* 第8章 リファクタリングのカタログ3 - 特性の移動

- Move function (関数の持ち主を変える)
- Move field (属性の持ち主を変える)
- Move statement into function(関数の責任を増やす)
- Move statement to caller(関数の責任を減らす)
- Slide statement
- ⭐ Split loop
- Replace loop with pipeline
- Remove dead code
- etc.

* 第9章 リファクタリングのカタログ4 - データの再編成

- Split variable(変数の再利用をやめる)
- Rename field
- ⭐ Replace derieved variable with query(計算結果を変数に記憶するのをやめて毎回計算する)
- Change reference to value(変数にオブジェクト参照を持つのではなく値を持つ)
- Change value to reference(リポジトリパターンを使って値の再利用をやめて参照を持つ)

* 第10章 リファクタリングのカタログ5 - 条件記述の単純化

- Decompose conditional(if文の判定、中身をそれぞれ関数にする)
- Consolidate conditional expression(判定後の振る舞いが同じなら判定をandやorで一個にまとめる)
- Replace nested conditional with guard caluses(ガード節でネストを減らす)
- ⭐ Replace conditional with Polymorphism(if文をポリモーフィズムでまとめる)
- ⭐ Introduce special case(値がないことを示すために特別な値)
- ⭐ Introduce assertion

assetion は ruby ではサポートしてない。無理して使うことはない。

* 第11章 リファクタリングのカタログ6 - API

- ⭐ Separate query from modifier(副作用のある関数呼び出しと、その途中計算を分割する)
- Parameterize function(似た振る舞いの関数について、引数を増やして1個にまとめる)
- Remove flag argument(bool引数を持つ関数はtrueとfalseの2つの関数に分ける)
- Preserve whole object(引数を属性分解して渡さずオブジェクトのまま渡す)
- Replace plarameter with query(オブジェクトとそこから導出可能な値を引数にするよりオブジェクトだけ引数にする)
- Replace query with parameter(上記の逆、導出方法に対する依存関係を切るために使う)
- Remove setting method
- Replace constructor with factory function(オブジェクト初期化のバリエーションを増やしたい時に)
- ⭐ Replace function with command(関数自身をコマンドオブジェクトにする / serviceと似ている)
- Replace command with function

コマンドとクエリの分離原則というのは、状態変更する関数と、状態観測する関数を分けよう、という話。
デザインパターンの Command とはまた別の話。

* 第12章 リファクタリングのカタログ6 - 継承

- Pull up method(サブクラスのメソッドを、スーパークラスに移動する)
- Pull up field(サブクラスの属性を、スーパークラスに移動する)
- Pull up constructor body
- ⭐ Pull down method
- Pull down field
- ⭐ Replace type code with subclasses(type属性の代わりにサブクラスを作る)
- Remove subclass(サブクラスを削除しtype属性だけにする)
- Extract superclass(共通部分をスーパークラスにし継承する)
- Collapse Hierarchy(継承を削除して実装を一個のクラスにまとめる)
- 🤔 Replace subclass with delegate(サブクラスを移譲に置き換える:例が特殊な印象)
- Replace superclass with delegate

クラスを別のクラスに作り変える beXxx メソッドというのも面白い。

* 感想

リファクタリングの例がかなり詳細に書かれているので、具体的にイメージしやすい。
ただ、読むのに時間がかかるので、途中からリファクタリング例はあまり細かくみないようにした。
序盤で説明されているリファクタリングの重要さや、仕様を変えないことの重要さなどは非常に大切。
今後リファクタリングしようとする時や、コードレビューするときに役立てたいと思った。
