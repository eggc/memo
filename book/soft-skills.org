https://bookplus.nikkei.com/atcl/catalog/22/S00500/

第二版の方

* 第1部 キャリア
** 第2章 自分のキャリアをビジネスとして扱え

- エンジニアも鍛冶屋みたいなものだと考える。
  - いつでもどこでも店を出して良い。
  - 自分の責任で自分のビジネスをマネジメントする。
  - 自分がどういうスキルを持っているか。
  - 市場がどういうスキルを求めてるのか。

** 第3章 適切なキャリア目標の立て方

- ほとんどの人はどうなりたいのか考えられない
- 苦しいけど人生の航路を立てよう
- やり方
  - 大目標を決める（例：起業家・管理職・開発会社社長）
  - 小目標を決める（毎月１冊本を読むとか）
  - 検証する（コースからそれてないか）

** 第4章 社交スキルを鍛える

- エンジニアも人と会話することが多い
- デール・カーネギー「人を動かす」の社交術
  - 人はみな「大切にされている」と感じるとうれしい
    - 礼を尽くす
    - 批判しない
    - 話題の中心を相手にもっていく
    - 議論しない
  - 枠組みという概念
    - 人は枠組み（世界観）を持つ
    - 会話すると、枠組みと枠組みが衝突する
    - どちらか一方が場を支配する
    - 場を支配するには、自分の価値観の矛盾を認めなければいい
    - 例：車運転してて、警察に呼び止められた

** 第5章 よい履歴書の作り方

- 履歴書は旅行パンフレットのようなものだと考える
  - 誰かにお金を使わせようという目的・宣伝
  - 履歴書はそこまで周囲深く作られない粗末なことが多い
  - 300-500ドル払って、プロに依頼するのが最も良い
    - しっかり情報提供する
  - 雇いたくないならしっかり目的を考えて推敲するべき

** 第6章 面接をハックする

- どれだけ技術があっても傲慢で親しみにくい人は採用されない
- 面接官に気に入ってもらうのが重要
- 事前に知人となっておくというハックは強い
- 理想的な手法
  - 接点を見つける
  - 接点となる人を作る
  - 親密になる
  - 推薦をもらう
- ただし、お互いの利益になるように動かないとまずい
- 面接当日の動き方
  - 求められていることを理解しているとアピール
  - 実行できるという自信をアピール
  - 当然それだけの力がないとダメ
- 今転職を考えてなくても、人脈を作った方がよい

** 第7章 ソフトウェア開発者の3種類のキャリアパス

- 会社の従業員
  - 収入が安定している（ただし天井はある
  - 責任が少ない
  - 自由が少ない
- 独立系コンサルタント
  - 収入が増える可能性が高い
  - 自由な時間の使い方
  - 雑用が多い
- 起業家
  - 大きな収入を得る可能性がある
  - リスキー
- そのキャリアを持っている知人に話を聞いてから選択するのがよい

** 第8章 専門特化の必要性

- 弁護士にも離婚とか不動産とかの細かい専門分野がある
- 多くの場合ジェネラリストよりもスペシャリストが求められる
- 求人は減るが、当てはまる企業からすると極めて価値の高い人間になれる
- 今感じているペインを解消できる技術の専門家になるとよい
- 後から専門を変えても良いのでとりあえず選べば良い
- 多くのことを学ぶのは重要だが採用の面からは専門特化のほうが選ばれやすい

** 第9章 就職先の企業のタイプ

- 小さな会社・スタートアップ
  - さまざまな役割で働くことを求められる
  - 自分の仕事の影響がわかりやすい
  - 収入面は安定しにくい
- 中くらいの会社
  - 安定している
- 大企業
  - 決められた手続きや手順が多い
  - ツールの自由度があったり、学習の補助があったりする
  - 社内政治

** 第10章 出世階段の上り方

- 責任を引き受けると収入も上がる
- 上司から声がかかるのを待つ以外の方法
  - 他の人が関わりたがらないことを引き受けて自分の領土にしよう
  - ボランティアで動いていると頼れる人だという評判がつく
  - チームを支援する・ドキュメントを書く・自動化する
- 自分の働きをみてもらう
  - 上司に週報を送る（働きを知ることが管理職の責務なので押し付けではない）
  - 勉強会で登壇する・講師を申し出る
  - 会議でコメントする
- 勉強する
  - 資格試験を受ける
  - 学んだことをシェアして宣伝する
- どれだけ手を尽くしても昇進の気配がない会社はやめるべき
- 社内政治にはなるべく触れず、逆らってはいけない人を知っておくくらいでいい

** 第11章 プロであること

- プロは何があっても仕事を前進する。
- 自分で責任を取る覚悟で、難しい選択をすることを厭わない
- プロは良い仕事をするための習慣を持っている。
- エンジニアは医者と同じで、クライアントの言う通り仕事をしてはならない
- つねに自己研鑽する

** 第12章 同僚やボスとのうまい付き合い方

- 知的な人々の中で合意形成をするのは難しい
- 妥協の連続にならないために会社の意志を代表する管理職（ボス）が決断する
- 意見を行った後はボスの決定に服従することが大事
  - 例：コメントアウトしてあるコードを削除したらボスに怒られた
  - コメディーの一場面のように捉えて受け流そう
  - ここで正面からぶつかると大きなストレスになる
- 面倒な同僚も同じようにコメディーの演者だと考えてみよう
- 自分自身が面倒な人にならないために他人と共感するようにしよう

** 第13章 テクノロジーに宗教のように接するな

- iOS 信仰とか
- 知っているからという理由だけで独善的に信仰しがち
- すべてがいいものだと考える
- 選択肢を制限しないで生きていこう

** 第14章 会社をやめて自由を得るための方法

- 副業をみつけてからやめる方が良い
- 普通に仕事してるつもりでもメールや雑談したりSNSでサボったりするので50%くらいしか全力で働いてない
- 独立するとその50% を仕事にささげるつもりでないとしんどい

** 第15章 フリーランサーの仕事の始め方

- 仕事がなくなるのが一番怖い
- クライアント探しは知り合いに紹介してもらうのが一番よい
- 求人サービスを使う
- ブログ、ポッドキャスト、カンファレンス参加などで宣伝する
- 料金設定は、福利厚生を込みにする。理想は会社員のときの2倍。
- 説得力のために実績を伝える。クライアントに対して、解決策を提案する。
- 「高すぎる」と言われるまで料金は上げて良い

** 第16章 製品を持つ起業家になる方法

- ターゲット層を見つけてから製品を作る
- ターゲットがいないとお金にならない
- ブログなどを連載してファンがいると客になりやすい
- 作ろうとしているものを買ってくれる人を事前に確保する（クラウドファンディングみたいな）
- 失敗する可能性は非常に高いのでまずは小さな製品でチャレンジして学習するのがよい

** 第17章 スタートアップの起業のしかた

- 出資者
  - 外部の投資家
  - 個人（創業者）
- 出口戦略
  - 買収してもらうこと
  - 株式公開
- 知的財産によって模倣されにくいようになっているべき。
- 共同創業者がいたほうがよい。
- アクセラレーターというスタートアップ資金提供のしくみがあるのでそれに応募するべき。
- シード出資：エンジェル投資家が創業されたばかりのスタートアップに資金提供する（対価は株式）
- シリーズA：ベンチャーキャピタルからの投資。ここで資金を使い果たしたらさらに投資を受けるか倒産するか。

** 第18章 リモートワーク

- さぼりの誘惑に負けないために時間管理が大事（習慣化・スケジュール化する）
- 孤独感があるならジムに行くとか開発者イベントに行くとかシェアオフィス行くとか

* 第2部 セルフマーケティング
** 第19章 セルフマーケティングの基礎
- 儲けにつながるのは才能よりも、売り方
- 街の片隅のバンドと世界ツアーをしているバンドのどっちが上手いか
- パーソナルブランド（自分が何になりたいか、どう思われたいか）を作るところから始まる
- ブランドの発信はブログがおすすめ。
- 他の発信方法は、ポッドキャスト、動画配信、雑誌掲載、会議の講演など。
- 重要なことは、耳を傾けた人に価値をもたらすこと。問題に答えて娯楽を与えること。

** 第20章 パーソナルブランドの確立方法

- ブランドとはロゴそのものではなくて、目を瞑ってもイメージできるもの
- 例：スターバックスの店に入った時の雰囲気、注文の仕方、店員のふるまい、ドリンクの品質・・・。
- ブランドには、メッセージ、ビジュアル、一貫性、反復的な露出の4つが必要。
  - メッセージ：ブランドから呼び起こしたい感覚「例：シンプルプログラマー」ニッチなほうがよい。
  - ビジュアル：ロゴ。適当なサービスで５ドルくらいで作って良い。
  - 一貫性：常に同じであること。接した時の体験がかわらないこと。
  - 反復的な露出：積極的に動いていろいろな活動をし、人の目に触れるようにする。

** 第21章 成功するブログの作り方

- ブログがあれば、就職やクライアント探しで有利。自分の製品を作った時の宣伝にも使える。
- スキルアップやコミュニケーション力にもつながる。
- 有料の wordpress サービスがおすすめ。
- 無料だと広告を載せる時に困る。同じ理由でドメインも取得した方が良い。
- 成功のポイント
  - なるべく1週間に1回以上の頻度で書く
  - シェアしたくなるような品質の高い記事を書く
  - 完璧である必要はないが、いいものを書こうという努力は必要（タイポなくすとか、構造を持たせるとか）
  - コンスタントに更新できている人はソフトウェアエンジニア1%くらいしかいない
- トラフィックを得る方法
  - 人のブログにコメントを書き、そのとき自分のブログにたどり着けるようにしておくのがおすすめ
  - SNSでの共有
  - hacker news とかに流すのも良い方法だが、強い批判（あるいは誹謗中傷）にさらされるリスクもある

** 第22章 youtube によるブランド構築

- 動画配信は親近感をもたせやすい
- コーディング能力をはっきりと見せることができる
- 手間がかかるのでライバルは少ない
- ニッチであればあるほど成功しやすい
- コンテンツパイプラインを作る
  - 最初にアイデアを30個くらい書き並べる
  - どのアイデアを動画にするか選ぶ
  - 制作プロセスを固定化して、場合によっては外注する
- 何度も作っているうちにカメラの扱いはうまくなっていくので勉強はさほど必要ない

** 第23章 他者のために価値を生み出すことが重要な理由

- アインシュタインもそう言ってる
- セルフマーケティングでは、人の欲しがっているものを与えよ、なんて言葉もある
- 何を欲しがっているのか皆自分のことはわからないので、それを探る必要がある
- 業界のトレンドとか
- 自分がしていることの9割は無料で与えて良い（拡散されやすい）

** 第24章 ソーシャルメディアを使ったブランド構築

- フォロワーがいないとメッセージは広がらない
- 一番最初にすることはフォローして、フォローバックしてもらうこと
- フォローを頼むことを恐れてはいけない
- 怪しいサービスでフォロワーを増やすのは偽アカウントなのでお金の無駄
- SNSでも価値の提供を考えていった方がよい（朝ご飯に＊を食べた、とかは価値提供できてない例）
- ニッチな情報の案内人となるのがよい
- ニュース・ブログ記事の共有とか、有名な言葉の引用とか、ジョークとか、会話したくなる疑問とか
- 価値提供につながりにくいので自分のための宣伝は控えめにした方が良い。
- 時間が足りないので、力を入れる SNS は1,2個にした方が良い
- 投稿予約サービスとか使うのも良い
- 週に1時間とかでも運営できる
- twitter, linkedin がおすすめ facebook, instagram も一応やっておくのがよい

** 第25章 講演、講師、プレゼンテーション

- ライブは人に親近感を与える。講演とかやるのは他の人に良い印象を与えやすい。
- 自分のコンテンツを修正していけるので良い。
- 職場でのプレゼンテーションを経験していこう。
  - 学んだことをシェアして人の役に立ちたいというだけでよい。
- 他の方法は、ユーザグループとかに参加して自分で発表したいといえば多くの場合は受け入れられる。
- 慣れてきたら、開発者会議に応募してみるのがよい。難しいが、メリットも大きい。
- パラシュート部隊のようなもので、最初恐怖を感じるのは当然なので、少しずつ慣らしていこう。
- 何かを教えるコンテンツを youtube で配信するのも良いと思う

** 第26章 本や記事の執筆

- 著者と読者の気持ちが通じるようなことがないと成功しない
- 一方的に言葉を投げつけられているのではなくて、話しているような気分にさせるもの
- 本を書いただけでも専門家のようにみられるというメリットがある
- 収入につながることは稀、自分の評価を高めることのほうがメリットと考えた方がよい
- 無名の著者が出版するのは難しいのでセルフブランディングが大事。
- 自費出版も悪くない。leanpub とか使うと良い。kindle でも自費出版できる。


* 第3部 学習
** 第27章 学び方を学ぶ

- 学校を卒業してから学ばなくなった人はやばい
- 学んだことを実際にやってみて人に伝えるのが一番効果的。そこに個性はない。
- 例えば自転車のことをどれだけ座学で知ったとしても初めて触れた時に乗りこなすのは無理だ
- 遊びは学びへの強力なモチベーション
  - 著者はMTGにハマっていたことがあって、意識もせずに全てのカードの効果とスタッツを覚えていたことがある
  - 知識が足りなくても手を動かしているくらいが良い。疑問が溜まってきたら本を読むので良い
- 遊ぶ→知識を仕入れる→人に伝える（ブログなどでも良い）が学びのパターン。

** 第28章 私の10ステッププロセス

- 本を読む→試すというやり方は、ペースが遅いのと、後から本を読み直すという手間が生じる
- 時間がたっぷりあるならそれで良いが、時間がだんだんたりなくなってきたそこで下のように変化してきた
  - 前提知識は何か？
  - それを知ると何ができるのか？
  - 基本的なユースケースは何か？（日常80%をカバーできるコア知識は何か？）
  - 学べなかった知識はリファレンスに頼れば良い
- 10ステップ
  1. 全体像を掴む
  2. 学習範囲を決める
  3. 成功の基準を決める
  4. 参考資料を見つける
  5. 学習プランを立てる
  6. 参考資料を絞り込む
  7. ある程度使えるようにするための方法を学ぶ
  8. 遊び倒す
  9. 役に立つことができるところまで学ぶ
  10. 教える
- これは魔法の方法というわけではなくて、好みで作り替えてよい

** 第29章 ステップ1〜6：一度限りのステップ

- 1. 全体像を掴む：ネットで調べて、どれくらい複雑なテーマなのか、サブテーマはどういうのがあるのか知る
- 2. 学習範囲を決める：全部を知るのは時間的に不可能なのでやりたいことを踏まえて、学ぶことを絞る（例は下記）
  - いろいろなことを学びたいと思うかもしれないが、まずは学習範囲を狭めておくのが効率的

| 全体     | 学習範囲                                                         |
|----------+------------------------------------------------------------------|
| C#       | 単純なコンソールアプリケーションを作るのに必要な C# の基礎を学ぶ |
| 写真撮影 | デジタルカメラでポートレート写真の取り方を知る                   |
| Linux    | Ubuntu のインストールとセットアップ、基本機能を知る              |

- 3. 成功基準を決める：脱線しにくくする効果がある。
  - 自分のカメラの機能を全て知っていて使うことができる、どのシーンで使うべきかの理由もわかる
  - C# で主要な言語機能を全て利用している小さなアプリケーションが作れる
  - HTML5 を使ってインターネット上に自分の履歴書と仕事歴を表示するページが作れる

- 4. 参考資料をみつける
- 5. 学習プランを立てる：目次に書いてあることを洗いざらいやるのでなく、必要なポイントを見つける。
- 6. 参考資料を絞り込む：バスケのチームを選抜するような感じで、良さそうなものを選ぶ。

** 第30章 ステップ7〜10：繰り返すステップ

- 7. ある程度使えるようにするための方法を学ぶ：準備全くしないのも準備しすぎるのもよくない。バランス取る。
- 8. 遊び倒す：自由になんでもして良い。重要。
- 9. 役に立つことができるところまで学ぶ：子供のように好奇心を蘇らせ、自分で解決できなかった問題を、資料から学びとる
- 10. 教える：人より一歩先にいるだけでも教える立場になれる。恐れずやる。それによって知識が再構成され洗練される。ブログに書くのでもよい。

** 第31章 メンターの探し方

- 英雄譚にはたいていメンターがいる。メンターがいると成長できたり試練を乗り越えれる。
- 優れた教師は、多くの落とし穴にハマったことがある人。
- 自分がやりたいことをすでに成し遂げた人や、成し遂げた人を支えた人をメンターに選ぶとよい。
- 自分の誤った知識・先入観よりも、メンターが達成したことを基準にメンターを選ぶべき。
- 友人や家族から紹介してもらえるならそれが良い
