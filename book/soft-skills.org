https://bookplus.nikkei.com/atcl/catalog/22/S00500/

第二版の方

勤勉だけど自信家でおしゃべりな先輩がいて、
成功するための持論を聞かされているような感じ。
技術以外のいろいろなことを網羅しているので、
「この本から得るものがなかった」ということにはならないと思う。
特に自分が良かったと思うのは勉強の仕方と、生産性についての話。

新しいことを学ぶとき、全部やるのでは時間が足りない。
やりたいことを決めてマイルストーンを達成していくのが良い。
書き出してみると当たり前だけど、
そういう考え方を持っていなかったのですぐ実践しようと思った。

何かを実現するのに繰り返し努力するのは必要なこと。
生産性のために習慣をつけるにはどうするか。
良い習慣・悪い習慣。気持ちの持ち方、ポモドーロテクニックの使い方。
といった話題が詰まっているセクションがあって、
これも面白いと思ったし、自分を変えてみたいと思った。

あとはキャリアとか仕事の話でも、考え方が変わった。
今まではとにかく上司に従順にひっそり生きていこうと考えていた。
けれど本を読んで、自分を売り込むということを怖がらずにいこう。
自分の担当範囲外のことでもチャレンジしてみよう。そんなふうに思った。
理由としては自分が得をするから。
ただ席を譲り続けてもそのことを恩義に思う人はほとんどいない。気づきもしない。
なので自分で活躍できると思ったら、自分から手を挙げる。
そうして評価を受けることが自然なのだと考えた。

全体を通して半分自慢話ではあるけれど、
残りの半分は読者へ向けた激励の言葉が並んでいる。
それに勇気をもらえる部分がある。
頑張ろうとか。やってみようとか。失敗を恐れないでとか。
より良い生き方を目指してみようという気になれたと思う。

* 第1部 キャリア
** 第2章 自分のキャリアをビジネスとして扱え

- エンジニアも鍛冶屋みたいなものだと考える。
  - いつでもどこでも店を出して良い。
  - 自分の責任で自分のビジネスをマネジメントする。
  - 自分がどういうスキルを持っているか。
  - 市場がどういうスキルを求めてるのか。

** 第3章 適切なキャリア目標の立て方

- ほとんどの人はどうなりたいのか考えられない
- 苦しいけど人生の航路を立てよう
- やり方
  - 大目標を決める（例：起業家・管理職・開発会社社長）
  - 小目標を決める（毎月１冊本を読むとか）
  - 検証する（コースからそれてないか）

** 第4章 社交スキルを鍛える

- エンジニアも人と会話することが多い
- デール・カーネギー「人を動かす」の社交術
  - 人はみな「大切にされている」と感じるとうれしい
    - 礼を尽くす
    - 批判しない
    - 話題の中心を相手にもっていく
    - 議論しない
  - 枠組みという概念
    - 人は枠組み（世界観）を持つ
    - 会話すると、枠組みと枠組みが衝突する
    - どちらか一方が場を支配する
    - 場を支配するには、自分の価値観の矛盾を認めなければいい
    - 例：車運転してて、警察に呼び止められた

** 第5章 よい履歴書の作り方

- 履歴書は旅行パンフレットのようなものだと考える
  - 誰かにお金を使わせようという目的・宣伝
  - 履歴書はそこまで周囲深く作られない粗末なことが多い
  - 300-500ドル払って、プロに依頼するのが最も良い
    - しっかり情報提供する
  - 雇いたくないならしっかり目的を考えて推敲するべき

** 第6章 面接をハックする

- どれだけ技術があっても傲慢で親しみにくい人は採用されない
- 面接官に気に入ってもらうのが重要
- 事前に知人となっておくというハックは強い
- 理想的な手法
  - 接点を見つける
  - 接点となる人を作る
  - 親密になる
  - 推薦をもらう
- ただし、お互いの利益になるように動かないとまずい
- 面接当日の動き方
  - 求められていることを理解しているとアピール
  - 実行できるという自信をアピール
  - 当然それだけの力がないとダメ
- 今転職を考えてなくても、人脈を作った方がよい

** 第7章 ソフトウェア開発者の3種類のキャリアパス

- 会社の従業員
  - 収入が安定している（ただし天井はある
  - 責任が少ない
  - 自由が少ない
- 独立系コンサルタント
  - 収入が増える可能性が高い
  - 自由な時間の使い方
  - 雑用が多い
- 起業家
  - 大きな収入を得る可能性がある
  - リスキー
- そのキャリアを持っている知人に話を聞いてから選択するのがよい

** 第8章 専門特化の必要性

- 弁護士にも離婚とか不動産とかの細かい専門分野がある
- 多くの場合ジェネラリストよりもスペシャリストが求められる
- 求人は減るが、当てはまる企業からすると極めて価値の高い人間になれる
- 今感じているペインを解消できる技術の専門家になるとよい
- 後から専門を変えても良いのでとりあえず選べば良い
- 多くのことを学ぶのは重要だが採用の面からは専門特化のほうが選ばれやすい

** 第9章 就職先の企業のタイプ

- 小さな会社・スタートアップ
  - さまざまな役割で働くことを求められる
  - 自分の仕事の影響がわかりやすい
  - 収入面は安定しにくい
- 中くらいの会社
  - 安定している
- 大企業
  - 決められた手続きや手順が多い
  - ツールの自由度があったり、学習の補助があったりする
  - 社内政治

** 第10章 出世階段の上り方

- 責任を引き受けると収入も上がる
- 上司から声がかかるのを待つ以外の方法
  - 他の人が関わりたがらないことを引き受けて自分の領土にしよう
  - ボランティアで動いていると頼れる人だという評判がつく
  - チームを支援する・ドキュメントを書く・自動化する
- 自分の働きをみてもらう
  - 上司に週報を送る（働きを知ることが管理職の責務なので押し付けではない）
  - 勉強会で登壇する・講師を申し出る
  - 会議でコメントする
- 勉強する
  - 資格試験を受ける
  - 学んだことをシェアして宣伝する
- どれだけ手を尽くしても昇進の気配がない会社はやめるべき
- 社内政治にはなるべく触れず、逆らってはいけない人を知っておくくらいでいい

** 第11章 プロであること

- プロは何があっても仕事を前進する。
- 自分で責任を取る覚悟で、難しい選択をすることを厭わない
- プロは良い仕事をするための習慣を持っている。
- エンジニアは医者と同じで、クライアントの言う通り仕事をしてはならない
- つねに自己研鑽する

** 第12章 同僚やボスとのうまい付き合い方

- 知的な人々の中で合意形成をするのは難しい
- 妥協の連続にならないために会社の意志を代表する管理職（ボス）が決断する
- 意見を行った後はボスの決定に服従することが大事
  - 例：コメントアウトしてあるコードを削除したらボスに怒られた
  - コメディーの一場面のように捉えて受け流そう
  - ここで正面からぶつかると大きなストレスになる
- 面倒な同僚も同じようにコメディーの演者だと考えてみよう
- 自分自身が面倒な人にならないために他人と共感するようにしよう

** 第13章 テクノロジーに宗教のように接するな

- iOS 信仰とか
- 知っているからという理由だけで独善的に信仰しがち
- すべてがいいものだと考える
- 選択肢を制限しないで生きていこう

** 第14章 会社をやめて自由を得るための方法

- 副業をみつけてからやめる方が良い
- 普通に仕事してるつもりでもメールや雑談したりSNSでサボったりするので50%くらいしか全力で働いてない
- 独立するとその50% を仕事にささげるつもりでないとしんどい

** 第15章 フリーランサーの仕事の始め方

- 仕事がなくなるのが一番怖い
- クライアント探しは知り合いに紹介してもらうのが一番よい
- 求人サービスを使う
- ブログ、ポッドキャスト、カンファレンス参加などで宣伝する
- 料金設定は、福利厚生を込みにする。理想は会社員のときの2倍。
- 説得力のために実績を伝える。クライアントに対して、解決策を提案する。
- 「高すぎる」と言われるまで料金は上げて良い

** 第16章 製品を持つ起業家になる方法

- ターゲット層を見つけてから製品を作る
- ターゲットがいないとお金にならない
- ブログなどを連載してファンがいると客になりやすい
- 作ろうとしているものを買ってくれる人を事前に確保する（クラウドファンディングみたいな）
- 失敗する可能性は非常に高いのでまずは小さな製品でチャレンジして学習するのがよい

** 第17章 スタートアップの起業のしかた

- 出資者
  - 外部の投資家
  - 個人（創業者）
- 出口戦略
  - 買収してもらうこと
  - 株式公開
- 知的財産によって模倣されにくいようになっているべき。
- 共同創業者がいたほうがよい。
- アクセラレーターというスタートアップ資金提供のしくみがあるのでそれに応募するべき。
- シード出資：エンジェル投資家が創業されたばかりのスタートアップに資金提供する（対価は株式）
- シリーズA：ベンチャーキャピタルからの投資。ここで資金を使い果たしたらさらに投資を受けるか倒産するか。

** 第18章 リモートワーク

- さぼりの誘惑に負けないために時間管理が大事（習慣化・スケジュール化する）
- 孤独感があるならジムに行くとか開発者イベントに行くとかシェアオフィス行くとか

* 第2部 セルフマーケティング
** 第19章 セルフマーケティングの基礎
- 儲けにつながるのは才能よりも、売り方
- 街の片隅のバンドと世界ツアーをしているバンドのどっちが上手いか
- パーソナルブランド（自分が何になりたいか、どう思われたいか）を作るところから始まる
- ブランドの発信はブログがおすすめ。
- 他の発信方法は、ポッドキャスト、動画配信、雑誌掲載、会議の講演など。
- 重要なことは、耳を傾けた人に価値をもたらすこと。問題に答えて娯楽を与えること。

** 第20章 パーソナルブランドの確立方法

- ブランドとはロゴそのものではなくて、目を瞑ってもイメージできるもの
- 例：スターバックスの店に入った時の雰囲気、注文の仕方、店員のふるまい、ドリンクの品質・・・。
- ブランドには、メッセージ、ビジュアル、一貫性、反復的な露出の4つが必要。
  - メッセージ：ブランドから呼び起こしたい感覚「例：シンプルプログラマー」ニッチなほうがよい。
  - ビジュアル：ロゴ。適当なサービスで５ドルくらいで作って良い。
  - 一貫性：常に同じであること。接した時の体験がかわらないこと。
  - 反復的な露出：積極的に動いていろいろな活動をし、人の目に触れるようにする。

** 第21章 成功するブログの作り方

- ブログがあれば、就職やクライアント探しで有利。自分の製品を作った時の宣伝にも使える。
- スキルアップやコミュニケーション力にもつながる。
- 有料の wordpress サービスがおすすめ。
- 無料だと広告を載せる時に困る。同じ理由でドメインも取得した方が良い。
- 成功のポイント
  - なるべく1週間に1回以上の頻度で書く
  - シェアしたくなるような品質の高い記事を書く
  - 完璧である必要はないが、いいものを書こうという努力は必要（タイポなくすとか、構造を持たせるとか）
  - コンスタントに更新できている人はソフトウェアエンジニア1%くらいしかいない
- トラフィックを得る方法
  - 人のブログにコメントを書き、そのとき自分のブログにたどり着けるようにしておくのがおすすめ
  - SNSでの共有
  - hacker news とかに流すのも良い方法だが、強い批判（あるいは誹謗中傷）にさらされるリスクもある

** 第22章 youtube によるブランド構築

- 動画配信は親近感をもたせやすい
- コーディング能力をはっきりと見せることができる
- 手間がかかるのでライバルは少ない
- ニッチであればあるほど成功しやすい
- コンテンツパイプラインを作る
  - 最初にアイデアを30個くらい書き並べる
  - どのアイデアを動画にするか選ぶ
  - 制作プロセスを固定化して、場合によっては外注する
- 何度も作っているうちにカメラの扱いはうまくなっていくので勉強はさほど必要ない

** 第23章 他者のために価値を生み出すことが重要な理由

- アインシュタインもそう言ってる
- セルフマーケティングでは、人の欲しがっているものを与えよ、なんて言葉もある
- 何を欲しがっているのか皆自分のことはわからないので、それを探る必要がある
- 業界のトレンドとか
- 自分がしていることの9割は無料で与えて良い（拡散されやすい）

** 第24章 ソーシャルメディアを使ったブランド構築

- フォロワーがいないとメッセージは広がらない
- 一番最初にすることはフォローして、フォローバックしてもらうこと
- フォローを頼むことを恐れてはいけない
- 怪しいサービスでフォロワーを増やすのは偽アカウントなのでお金の無駄
- SNSでも価値の提供を考えていった方がよい（朝ご飯に＊を食べた、とかは価値提供できてない例）
- ニッチな情報の案内人となるのがよい
- ニュース・ブログ記事の共有とか、有名な言葉の引用とか、ジョークとか、会話したくなる疑問とか
- 価値提供につながりにくいので自分のための宣伝は控えめにした方が良い。
- 時間が足りないので、力を入れる SNS は1,2個にした方が良い
- 投稿予約サービスとか使うのも良い
- 週に1時間とかでも運営できる
- twitter, linkedin がおすすめ facebook, instagram も一応やっておくのがよい

** 第25章 講演、講師、プレゼンテーション

- ライブは人に親近感を与える。講演とかやるのは他の人に良い印象を与えやすい。
- 自分のコンテンツを修正していけるので良い。
- 職場でのプレゼンテーションを経験していこう。
  - 学んだことをシェアして人の役に立ちたいというだけでよい。
- 他の方法は、ユーザグループとかに参加して自分で発表したいといえば多くの場合は受け入れられる。
- 慣れてきたら、開発者会議に応募してみるのがよい。難しいが、メリットも大きい。
- パラシュート部隊のようなもので、最初恐怖を感じるのは当然なので、少しずつ慣らしていこう。
- 何かを教えるコンテンツを youtube で配信するのも良いと思う

** 第26章 本や記事の執筆

- 著者と読者の気持ちが通じるようなことがないと成功しない
- 一方的に言葉を投げつけられているのではなくて、話しているような気分にさせるもの
- 本を書いただけでも専門家のようにみられるというメリットがある
- 収入につながることは稀、自分の評価を高めることのほうがメリットと考えた方がよい
- 無名の著者が出版するのは難しいのでセルフブランディングが大事。
- 自費出版も悪くない。leanpub とか使うと良い。kindle でも自費出版できる。

* 第3部 学習
** 第27章 学び方を学ぶ

- 学校を卒業してから学ばなくなった人はやばい
- 学んだことを実際にやってみて人に伝えるのが一番効果的。そこに個性はない。
- 例えば自転車のことをどれだけ座学で知ったとしても初めて触れた時に乗りこなすのは無理だ
- 遊びは学びへの強力なモチベーション
  - 著者はMTGにハマっていたことがあって、意識もせずに全てのカードの効果とスタッツを覚えていたことがある
  - 知識が足りなくても手を動かしているくらいが良い。疑問が溜まってきたら本を読むので良い
- 遊ぶ→知識を仕入れる→人に伝える（ブログなどでも良い）が学びのパターン。

** 第28章 私の10ステッププロセス

- 本を読む→試すというやり方は、ペースが遅いのと、後から本を読み直すという手間が生じる
- 時間がたっぷりあるならそれで良いが、時間がだんだんたりなくなってきたそこで下のように変化してきた
  - 前提知識は何か？
  - それを知ると何ができるのか？
  - 基本的なユースケースは何か？（日常80%をカバーできるコア知識は何か？）
  - 学べなかった知識はリファレンスに頼れば良い
- 10ステップ
  1. 全体像を掴む
  2. 学習範囲を決める
  3. 成功の基準を決める
  4. 参考資料を見つける
  5. 学習プランを立てる
  6. 参考資料を絞り込む
  7. ある程度使えるようにするための方法を学ぶ
  8. 遊び倒す
  9. 役に立つことができるところまで学ぶ
  10. 教える
- これは魔法の方法というわけではなくて、好みで作り替えてよい

** 第29章 ステップ1〜6：一度限りのステップ

- 1. 全体像を掴む：ネットで調べて、どれくらい複雑なテーマなのか、サブテーマはどういうのがあるのか知る
- 2. 学習範囲を決める：全部を知るのは時間的に不可能なのでやりたいことを踏まえて、学ぶことを絞る（例は下記）
  - いろいろなことを学びたいと思うかもしれないが、まずは学習範囲を狭めておくのが効率的

| 全体     | 学習範囲                                                         |
|----------+------------------------------------------------------------------|
| C#       | 単純なコンソールアプリケーションを作るのに必要な C# の基礎を学ぶ |
| 写真撮影 | デジタルカメラでポートレート写真の取り方を知る                   |
| Linux    | Ubuntu のインストールとセットアップ、基本機能を知る              |

- 3. 成功基準を決める：脱線しにくくする効果がある。
  - 自分のカメラの機能を全て知っていて使うことができる、どのシーンで使うべきかの理由もわかる
  - C# で主要な言語機能を全て利用している小さなアプリケーションが作れる
  - HTML5 を使ってインターネット上に自分の履歴書と仕事歴を表示するページが作れる

- 4. 参考資料をみつける
- 5. 学習プランを立てる：目次に書いてあることを洗いざらいやるのでなく、必要なポイントを見つける。
- 6. 参考資料を絞り込む：バスケのチームを選抜するような感じで、良さそうなものを選ぶ。

** 第30章 ステップ7〜10：繰り返すステップ

- 7. ある程度使えるようにするための方法を学ぶ：準備全くしないのも準備しすぎるのもよくない。バランス取る。
- 8. 遊び倒す：自由になんでもして良い。重要。
- 9. 役に立つことができるところまで学ぶ：子供のように好奇心を蘇らせ、自分で解決できなかった問題を、資料から学びとる
- 10. 教える：人より一歩先にいるだけでも教える立場になれる。恐れずやる。それによって知識が再構成され洗練される。ブログに書くのでもよい。

** 第31章 メンターの探し方

- 英雄譚にはたいていメンターがいる。メンターがいると成長できたり試練を乗り越えれる。
- 優れた教師は、多くの落とし穴にハマったことがある人。
- 自分がやりたいことをすでに成し遂げた人や、成し遂げた人を支えた人をメンターに選ぶとよい。
- 自分の誤った知識・先入観よりも、メンターが達成したことを基準にメンターを選ぶべき。
- 友人や家族から紹介してもらえるならそれが良い
- メンターにしたい人がいないなら本を読もう
- メンターにしたい人がいるなら粘り強く説得して時には無償労働するくらいの気持ちでいこう

** 第32章 メンターになる方法

- 自分がメンターになることのメリットはでかい
- 優れている必要はなく、誰かより一歩先にいるだけでいい
- タイガーウッズのコーチはタイガーウッズより下手
- 疑問の掘り下げが深くなる→理解が深くなる
- 教えた人が活躍した時に帰ってくる
- 学びたい気持ちがあって

** 第33章 教えることが最高の学習方法となる理由

- 教えることとは知識を分け合うこと
- 教えることとはライブラリやフレームワークを使ってみせること
- そこに学位や資格が必要なわけではない
- 教えることで紙に書いたり順序立てたりすることになり、情報が再構成される
- 謙虚かつ自信のある態度で教えるのが好ましい
- ブログから始めて、動画、プレゼンするとよい

** 第34章 学位は必要か

- 大企業では学位を持っている方が有利
- 例外はあるが選択肢は狭まる
- 絶対に必要というものではないビルゲイツが代表例
- 仕事の中でコンピュータサイエンスの基礎に戻らなければならないことはほぼない
- 大学へいけば独学よりも抜けがすくない
- 未経験でも仕事をはじめるというのがやりやすい
- 学位がないなら経験が必要
  - コントリビューション
  - ポートフォリオ
  - プライベートプロジェクト
  - java とか sccrum とかの認定証

** 第35章 知識の中の隙間を見つける

- 知識の隙間をなくすと長期的にはよくなる
- 例：ラムダ式がなんなのかよくわかってないまま使う
- 立ち止まって時間を割いて理解して使うのが良い
- 作業中にいつも引っかかるのが「知識の隙間」
- 日常のペインの中にそれはある

* 第4章 生産性
** 第36章 すべては集中から始まる

- 集中 = 一つの仕事にだけ向き合っている時間
- 集中していると効率が良いが、色々邪魔が入る
- 楽しい仕事ならすっと入っていける
- 楽しくない仕事でも苦痛に耐えれば集中できる
- コーヒーを飲んだり、トイレに行くのも忘れる
- 冗談のように思えるかもしれないが「邪魔しないで」の札を立てるのも効果がある
- スマホ触ったりブラウザ開くのを禁止するツールがある

** 第37章 私の個人的な生産メソッド

- GTD
- ポモドーロテクニック(25分集中)
- Dont break the chain = カレンダーに達成した印をつけていく
- 著者の方法
  - 2時間以内に終わる小さなタスクでカレンダーを埋め尽くす
  - 曜日ごとの看板ボードを使う kanbanflow
  - 四半期単位・月単位・週単位の計画をそれぞれ作る
  - 毎日当日計画を立てることから仕事を始める
  - 計画がおくれてもいいが1日Xポモドーロをこなすのは変えない
  - チャットは一切利用せずメールのみ
  - ときどき1ヶ月くらいの長期休暇をとる

** 第38章 ポモドーロテクニック

- 25分作業する、5分休憩する。これを繰り返す。
- 4セット走ったら15分くらいの少し長い休みを取る
- 作業が早く終わったら、改善したり追求したりする
- ポモドーロを回せた数を計測すると、見積もりに役立つ
- タスクが進まなくても、集中していたという事実が励みになる
- 労働時間は8なので16ポモドーロ実行できそうに見えるがほぼ無理
- 最初は6、慣れても10くらいが限度
- 科学者のポアンカレは朝2時間、夕方2時間しか働かなかった

** 第39章 クォータシステム

- 毎週・毎月定期的にやることに対して小さなマイルストーンを決める
- ブログ週に一回投稿する、週に3回ランニングするとか。
- 持続力を鍛えるのによい
- 壁を作るよりレンガをおくほうが簡単かつ実践できる

** 第40章 自分に対して責任を取る

- 内発的モチベーションの方が長持ちする
- 仕事は外発的モチベーションなので弱いがそれでも一定の力がある
- 雇用主に対して責任を持っている
- 自分に対する責任はどうか？　それは自制心、高潔さ、品位
- タイムテーブルのような枠組み、ルールがあるほうが自制心は働きやすい
- 毎日歯を磨くとかそういう習慣もまたルールと言える
- 自分を育成するゲームをプレイしていると考えてみよう
- 誰かパートナーを作る方法もある
  - 互いに進捗報告をして責任を発生させる
  - 失敗したときも報告をしなければならない
- 行動をオープンにすることも責任感をよぶ

** 第41章 並行作業の弊害が利益よりも大きい理由

- アメリカ心理学会のレポートによると並行作業は効率が落ちる
- 本人は効率が良いと思っていても落ちている
- 互いに邪魔しないなら並行作業もできる
  - 音楽を聞きながら文章を書く
  - 運動しながらオーディオブックを聞く
- 一括作業は効率的
  - メールをまとめて返信するとか

** 第42章 燃え尽きの対処法
- 最初にあったはずの情熱が消えてしまう
- 以下は医学的意見ではないので注意
- 新しい職場にきた時のことを思い出すと希望に満ちていたはず
- 結果は少しずつしか出ないので、頑張るほど現実が見えてきてやる気が下がる
- しかしある障害を超えるとブレイクスルーで結果が出るようになる
- 結果が出るとモチベーションも出てくる
- 結果を出せずに挫折した人はたくさんいるが結果を出せるようになるとライバルは激減する
- この先に何かがあるという執念と、繰り返しに耐える自制心、そのためのルールが必要

** 第43章 時間浪費のメカニズム
- テレビとか youtube とか netflix とかをやめよう
  - 平均的なアメリカ人は週に40時間もテレビを見ている
  - フルタイムで働いているのと同じかそれ以上に見ている
  - 普通のテレビ番組から得る利益は少ない
  - 価値観の固定化にも繋がってしまう
  - SNS、ゲーム、ニュースサイトもだめ
  - 本当に好きなことを、1日1回するのがいい
  - 料理とか、コーヒーとかも本当に好きでないならやめていい
  - 献立も固定していい
  - 庭掃除とかもお金を払って依頼することを検討していい
- 仕事で言うなら会議をやめる・会議に参加しない
  - メールとか、もっと時間のかからないやり方にしよう

** 第44章 ルーチンを持つことの重要性

- 毎日やるルーチンが人を変えていく
  - ランニングなら健康になる
  - ドーナツ屋へいくことなら不健康に
  - 毎日1000文字くらい書いてれば1年後には小説ができる
- 大きな目標を立てよう
  - 体重を 10kg 減らすとか
  - 小説を書き上げるとか
- そのためにやるべきことを小さな目標を立てよう
- 1日の始まりの1-2時間がもっとも体力があるのでそこでやりたいことをやろう
- スケジュールを立てることで失われた自由と柔軟性を、生産性と安心感が埋めてくれる

** 第45章 効果的な習慣の育て方

- 習慣はキュー、ルーチン、報酬の3つで構成されている
  - キュー = 習慣の現れる場面
  - ルーチン = 習慣で行うふるまい
  - 報酬：結果得られるもの、良い気分になる何か
  - たとえば
    - 夜寝る前
    - 歯を磨く
    - 虫歯になりにくい
- なぜか、報酬が変わるほうが中毒性が高い（その最たるものがギャンブル）
- よくない習慣を別のルーチンに連れていくと良い習慣にすり替えれる
  - たとえば
    - 朝
    - SNSを見てしまう
    - いいねがついてると嬉しい
  - みたいなのを良い習慣に切り替える
    - 朝
    - 仕事の中で一番楽しいものを探す
    - 良い気分で仕事を始められる
- これが良い例とは言えないけど頑張ればまあできなくはないかも
- 後ろめたいことや、辞めたいと思っていることから、変えていくべき
- 習慣に気づいた時、何がキュー、ルーチン、報酬なのか考えてみよう
  - 2分-10分とかちょっと待ち時間がある
  - twitter してしまう
  - 情報がとれる
- よりよい報酬が取れる習慣に変えていくのが理想
- write code every day
  - https://johnresig.com/blog/write-code-every-day/
  - https://qiita.com/choco_py3/items/fc24d2faf88c8f768cdf
  - https://offers.jp/media/sidejob/workstyle/a_1938
- 散歩しながら何かするとかは良い習慣

** 第46章 分解は生産性を上げる

- 橋やビルはそれ自体をみると実現不可能な途方もないものに見える
- 分解することが重要

** 第47章 ハードワークの価値と避けてしまう理由

- ゲームなら何時間でも遊べるのに小説を書くという努力は続かない。
- 脳がやる仕事としてはどちらも似たようなものなんじゃないか。
- 賢く、効率よくやるのとは別にハードワークは必要
- 努力して（ハードワークして）得られるものがあるのに、それを避けてしまうのはなぜか
- 面白くない、退屈、華やかでない
- みな苦しんでいるよ
- ルーチンがその助けになる

** 第48章 何でもしないよりした方がまし
- 行動は怖い
  - 人から見られる、変化する、時間を無駄にする
  - でも可能性が生まれる
- ずっとお風呂場のレイアウトで議論してて話が進まない夫婦の例
  - そのせいでシャワーとかがなくて不便なのに何年も過ごしている
  - ぶつかるのが怖い
  - 自分が間違っていたとわかるのが怖い
- 行動が遅れるほど損をすることが多い
  - 90点の答えで満足できず95点を探そうとしてしまう
  - テレビを買うのでずっと悩んだりとか
  - わからないときは、どれでもいいから一個選ぶ方がいい
- 車のハンドルは動いている時の方がやわらかい

* 第5章 資産形成
** 第49章 給料の賢い運用方法

- 余分に使える金額を全部車のローンに使うのはやめたほうがいい
- 一般的定義とは違うが下のように考えると良い
  - 資産: 維持費より価値が高い
  - 負債: 価値より維持費が高い
- お金の価値は変わるので十分だと思った貯金の価値が下がることもある

** 第50章 給与交渉のやり方

- ネットで有名人になると給料も増えやすい
- 自分で応募する前に会社から勧誘されると条件もよくなる
- 自分から望む報酬金額を言わないほうがいいが難しいと思う

** 第51章 投資先は不動産がよい

- 賃貸物件に投資するのがよい
  - 金額が激しく変動しない
  - 銀行貸付90%とかでスタートできる
  - インフレに耐えられる（物価の上昇とともに家賃も上昇する）
  - 脚注にデフレが起きない前提になってるので日本では NG だと書いてある

** 第52章 引退プランが本当に理解できているか

- 毎月生活するのに必要な金額を計算してから引退するべき
- 収入で生活水準を落とせない人は多いが節約すれば当然、引退に必要な金額も減る
- 国債を買うのはどうか
- 401k の唯一の弱点は60歳まで働き続ける前提になっていること
- ハイリスクハイリターンな方法
  - 60歳以前に引退する
  - 不動産、株、本の印税とかを狙う
  - 投資の元手のために実家で暮らし、車買わない

※ 著者の実績だけを押し付けているところが不快ではある

** 第53章 借金の危険性

- 不要な借金をなくすべき
  - 預金があるのに分割払いするのは愚かなのですぐ返済すべき
  - 3万ドル、年利5%を6年かけて払った場合、4786.65ドルも余分に払うことになる
  - 借金は金利の高いものを先に返済するべき
- よい借金
  - 1% の利息で借金して 3%の利率の物件を買うのはよい借金

** 第54章 本物の富と豊かさを築く方法

- 豊かになる方法 = 不労所得をえて、その収入でまかなえる範囲で生活する
- ストア哲学のように、必要なものを減らせば収入が少なくても良い
- 元本・収益率・時間が、バランス良く必要
- 元手が少ないなら自分自身を成長させることに使うべき

** 第55章 私はどのようにして33歳で引退したか

- 「したくない仕事をしない」自由が、引退だと考えてる
- 車買ったけど愚かだった
- 最初の不動産賃貸は失敗した
- 家を買って住んだ、それはもっと良い家があれば賃貸に出すつもりだった
- 更に追加で家を買って賃貸を始めた、最初の不動産管理会社は細かく修繕費を要求してきたので失敗だった
- 不動産売買の免許をとった
- 6つの物件はすべて赤字だったが、ほとんどがローンの返済だし、免税を受けられていた
- ここからリスク背負いまくっていろいろなことをした企業やさらなる物件の買付とか
- アプリとかアップロードした動画からも不労所得が取れるようになった
- 今は引退したけど仕事してて稼ぎの10%は寄付してる

* 第6部 フィットネス

※ あまり関心がないのでメモを減らす

- なんのために運動するか = 健康・創造性・自信
- 痩せるとかの目標をもったほうがいい
- 痩せたあとも運動やめてはいけない
- 摂取するカロリーを、燃焼するカロリー以下にすれば痩せる
- 先に高い靴を買うんじゃなくて、ある程度うまく行ってからご褒美に買うほうがやる気出てくる
- 腹筋が見えるということは痩せ過ぎているということに近く、かなりの努力を要する
- アプリを使ってランニングするといい
- 断食は以外と良い効果があるらしい
- 女性は危険なので注意してやるべき
- 一日一回だけ食事を摂るようにしたらいい著者はこれを5年やってていい感じらしい
- ずっと座ってるのは有害なのでたまにストレッチしよう

* 第7部 マインドセット

- 心が起点になって行動となり現実を変化させる
- ガンジーは思想が運命を変えるとまで言ってる
- 塞翁が馬：良し悪しはいつでも変わる
- 科学的に前向きなマインドが良いと言うのは証明されてる
  - 健康・収入・友情・寿命など
- 前向きになるために瞑想・遊び・読書とかがいいんじゃないか
- 自分がどういう人間なのかというセルフイメージさえも自分に影響を与える
  - 親からの何気ない一言や決めつけでそうなってしまう
- 自分はこういう人間だから変えられないというのは強力な思い込み
- 成功のイメージを持ち、自分自身を洗脳してみよう
  - なりたいものになれる
  - おしゃれな自分
  - 活発な自分
  - キーワードを持っておくと良い
- 恋愛はある種のゲーム
  - ありのままでいるよりも戦略的に演じること
  - 魅力的 ≠ 舞い上がっている、傷つきやすい etc
  - 魅力的 = 自分に自信を持っている
  - 自信を持つには、体を鍛えるとかファッションにこだわるとかする
  - 失敗しても数をこなせばいい
- 人にあったときおすすめの1冊を教えてもらうと良質なリストができる
  - 教養・自己啓発
    - スティーブン・プレスフィールド『やりとげる力』（筑摩書房、2008年）
    - デール・カーネギー『人を動かす』（創元社、1999年）
    - ナポレオン・ヒル『思考は現実化する』（きこ書房、1999年）
    - マックスウェル・マルツ『自分を動かす』（知道出版、2016）
    - ジョー・ディスペンザ『あなたという習慣を断つ』（ナチュラルスピリット、2015年）
    - アイン・ランド『肩をすくめるアトラス』（アトランティス、2014、15年）
    - セネカ『セネカ倫理書簡集※1』
  - ソフトウェア
    - スティーブ・マコネル『CODECOMPLETE』（日経BP、2005年）
    - ロバート・マーティン『CleanCodeアジャイルソフトウェア達人の技』（アスキードワンゴ、2020年）
    - エリック・フリーマン、エリザベス・ロブソン、バート・ベイツ、キャシー、シエラ『HeadFirstデザインパターン─頭とからだで覚えるデザインパターンの基本』（オライリー・ジャパン、2005年）
- 失敗を恐れないで
  - 子供でさえも知らない単語を読むのを嫌がる
  - 自我を傷つけられることのように錯覚する
  - 失敗しても再び立ち向かったらもっと良い体験になる
  - 安住の地にとどまり続けようとしてしまう自分を引っ張りだす
  - 向いてない、気乗りしないとかは最初は誰しもそう思うもの
  - 誰しも「他人のやらかし」を覚えてない
  - マイケル・ジョーダンは重い期待を背負ってシュートを外したことが何度もある
- ストア哲学
  - 自分の力で変えられることだけに力を注ぎましょう
  - ユーダイモニア ≒ 自分を高める、自分の生き方に責任を取る
  - 全ては借り物にすぎず、いつかは手放さねばならないという考え方
  - 不幸や変えられないことに対して、傷つかなくなる
  - アモールファティ ≒ 運命を受け入れ愛する
