* その他のメモ
** TODO 地図 API 関連

[[https://wasabitaro.com/other/mapbox][mapboxを使って特定の町村を塗りつぶした地図をマッピング]]
google マップよりも安く、多機能らしい。
ただし店舗情報とかは google マップに負ける。
こちらの記事も → [[https://blog.tagbangers.co.jp/ja/2020/08/26/getting-started-geojson-with-mapbox][Mapboxで始めるGeoJSON]]
mapbox に依存しない方法 → [[https://qiita.com/Shogo_Hirasawa/items/2c219a13304580eb70b4][MapLibreとは]]
国土地理院がgithubにいる → https://github.com/gsi-cyberjapan

** TODO [[https://zenn.dev/stafes_blog/articles/7f08ad8c783371][最新の音声認識モデル『Whisper』を使ってみたよ]]

学習モデルが large かつ騒音なしなら、かなり高精度で文字認識ができるらしい。

** TODO orval というコードジェネレータ

Open API の仕様を満たした YAML ファイルがあるとそれを使って、
その API を利用するための型定義と、呼び出しのための関数を定義してくれる orval というのがある。

** TODO 最新の nextjs で turbopack + tRPC でアプリ作ってみたい
** TODO [[https://github.blog/jp/2023-02-15-copilot-for-business-is-now-available/][Copilot for Business の一般提供（GA）を開始]]

> さらに、私たちの調査によると、GitHub Copilotを使用している開発者の90％がタスクをより早く完了し、73％が開発中のフロー状態の維持に役立ったと回答、精神的なエネルギーを節約できたことを報告しています。加えて、GitHub Copilotを利用する開発者の最大75％が、より満足度の高い仕事に集中できていると感じていることも明らかになっています。

ここまで言われたらまぁ使ってみた方がいいかもなぁとは思う。

** TODO [[https://arclamp.hatenablog.com/entry/2023/02/07/141927][アジャイルで「偉い人」はどう振る舞うべきか - arclamp]]
** TODO [[https://www.gartner.co.jp/ja/newsroom/press-releases/pr-20221101-techtrends][Gartner、2023年の戦略的テクノロジのトップ・トレンドを発表]]
** TODO [[https://qiita.com/tkyowa/items/ae9fa550237cb6f48318][[翻訳] Shopifyにおけるモジュラモノリスへの移行]]

** DONE [[http://chasen.org/~daiti-m/text/worse-is-better-ja.html][デザインの「悪い方がよい」原則 / The Rise of "Worse is Better"]]

だいぶ古い内容なので具体例が共感できない。
ただ、言わんとすることはわかる。
最後に書いてあることはまさにそうで、完璧とか最善を追求してはならないのだと思う。
そういう話じゃないのかな？

> このことから学ぶべき教訓は、最初に「正しい」方法をとることはしばしば望ましくないということである。とりあえず「正しい」ことの半分はできるものを作り、ウイルスのように広める方がよい。いったん人々がそれに騙されれば、「正しい」ことの90％までできるように改善が行われるだろう。

実はこの話には続きがあって、著者自身も悩んでいるようだ。

http://www.kt.rim.or.jp/~hisashim/gabriel/WorseIsBetter.ja.html

> 「進んでリスクをとり、新しい可能性に目を見開く意志を持ち、worse-is-betterを拒絶することで、卓越した素晴らしさを実現しうる環境が生まれる。自分を空にするもてなしの精神を発揮すれば、神がかった境地に至る◆→xenia invites the duende←◆。それは日々戦って勝ち取っていくものなのだ。なぜならそれに失敗する可能性は、単に技術的な意味においてではなく審美的な意味において存在するものだから。」

** DONE [[https://note.com/ruiu/n/n9948f0cc3ed3][「悪い方が良い」原則と僕の体験談]]

少し古い記事ではあるけど身につまされる内容。
「正しいやり方」を選んだら全然話が進まなくなって効率も悪くなってしまうということがある。
これは今やっているプロダクトでもそういう側面はあったかもしれない。
私はプログラムはチームの創作物のように考えている。
正しいやり方で大切に大切にしていこうという気持ちでやっていた。
けど人数が増えているから、みんなが好き勝手に触っていくのは避けられない。
レビューを通じて全体貢献をしてきたつもりだけどそれがスケールしないのは明らか。
そして、感謝もされない。もう疲れてしまっていて全体に目をかけるのはやめようと思っている。

** DONE [[https://hachibeechan.hateblo.jp/entry/domain-driven-deskwork][実はDDDってしっくりこないんです]]

DDD やろうとしてうまくいかないことがとても多く、かなり共感できる。
一方でちゃんとやってないからできてないだけとちゃうんみたいな気持ちもある。
理想は理想として知っておかないといけない気はする。

** DONE [[https://github.com/moneyforward/ex_web/pull/43516/files][衰退が確定した国におけるプランB]]
過激なタイトルのように見える。言っていることには共感できた。
日本の衰退は止めることが難しいということ。
海外で切磋琢磨するか、日本で苦しんでいる人を助けるかというのが理想ではある。

** DONE [[https://note.com/kenwagatsuma/n/nb1e450b8af26][なぜ海外でソフトウェアエンジニアとして働くのか｜Ken Wagatsuma｜note]]

柔らかい記事だった。
収入にこだわらなくていい、多言語もさほど重要でないという考えに共感できる。

** DONE The HACK というコミュニティ

The HACK というコミュニティがあるらしい。
そこで仲間をみつけてプロジェクトをやってみようというチャレンジをしているとのこと。

https://community.camp-fire.jp/projects/view/620269

** DONE [[https://logmi.jp/tech/articles/328014][「10年後、エンジニアとしてどうなっていたい？」ビジネス・テクノロジー・エンジニアリングの軸から見る、技術職のキャリアパス]]

内容は薄いけどとっつきやすい話ではあった。

| 方向性           | 中級職              | 上級職 | 必要なスキル       |
|------------------+---------------------+--------+--------------------|
| ビジネスパーソン | product owner       | VPoP   | プロダクトのリード |
| エンジニア       | tech lead           | CTO    | 技術リード         |
| マネージャー     | engineering manager | VPoE   | チームのリード     |
| 研究者           |                     |        |                    |

** DONE [[https://jinjibu.jp/keyword/detl/1254/][自己開示・自己呈示]]

趣味とか仕事に関係ないから分かち合う必要はないと思っている。
でも、仕事仲間と共通の趣味を持っていたら、それだけで信頼されやすくなる。
そういうことを狙って自己開示していくというのもある程度必要。
ただ、自分のことを大きく見せようとするのはかえって信頼関係を損なうのでよくない。

** DONE [[https://qiita.com/hirokidaichi/items/c66682a64ac2fc59cdf3]["技術的負債"論の道案内 - アーキテクチャの資本コストと情報の非対称性]]

「エンジニアリング組織論への招待」という本の筆者がその内容の一部をまとめた記事。

*** 意味
技術的負債という言葉は、ウォードカニンガムが1992年の発言が由来。
品質の低いコードは借金のようなもので、それを返済しないと、後続のコードが書けなくなる。
新しい機能を作る時に、それが生産性を下げる。
それは利息のように膨らんでいき、より生産性を悪化させる。

すなわちリファクタリングに時間を割く必要がある。

*** 原因
マーティン・ファウラーは下記のように技術的負債の原因を分析した。

- 無意識に作られる負債。<-> 意図的に作られる負債。
- 熟慮しても作られてしまう負債。<-> 考えなしに作られてしまう負債。

*** どうするべきか
無意識に作られてしまうものはスキルを高めるべき。
考えなしに作られてしまうものは考える時間をとるべき。
見えている範囲での柔軟性を保つように設計するのがよい。
過度に単純化したり、抽象化するのは結果的に負債となる。

プロダクトオーナーを説得するには、
技術的負債がある状態で機能追加したときの見積もりと
技術的負債を解消する作業をしてから機能追加したときの見積もりを比較すればいい。
そもそもプロダクトオーナーが技術的負債に関心をもたないならその議論は必要ない。
勝手にやればOK。もしわかり合いたいのなら技術的負債は、
何のどこにあるのかをはっきりさせてどれくらいの作業量があるのかも分かち合うべきかもしれない。
