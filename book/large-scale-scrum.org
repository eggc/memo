* 9 プロダクトバックログ

- バックログはただ一つ
- アイテムに依存関係を持たせない
  - A が終わらないと B ができないみたいなものは管理コストが高い
  - わからないのに予定を組んでしまいがち、そしてその予定が壊れやすい
  - 内部の異存関係
    - 大きなアイテムを分解したときに発生しがち
    - スタブを使う、スタブを取り除く、という2個のアイテムにする
    - スタブを取り除くことの優先度を落とすことで依存関係をなくす
    - アイテムは親子関係があってもせいぜい3階層程度にする
    - 親子関係はコンテキストを把握するためのもので、依存関係とならないようにする
  - 外部の依存関係
    - 外部のチームを待つ必要があるときはスタブして実装する
    - 依存を待たず完了できるアイテムと、依存を待って完了できるアイテムに作り替える
    - 依存しない方法を探す、自分から外部チームに働きかけ、可能なら一緒にコードを書く
- すこしかじる
  - 完全なタスクの洗い出しと、見積もりは不可能
  - 「考えてなかった」を見つけるためにフィードバックを得ることが重要
  - タスクの全体像を大まかに出した後は、すぐ着手する
    - これによってフィードバックを得る
  - 実装とリファインメントを50%ずつ１つのスプリントでやるという手もある。
- 数百のバグリストは細かく管理しない
  - バグトラッキングシステムで管理する
  - 件数が減ってきたらバックログにのせてもいい
  - 緊急のものはバックログにのせず緊急対応する
  - 緊急対応チームは当番制にしてローテーションする
- バックログは改善アイテムはのせない
  - さもないと改善アイテムだらけになり優先度づけのコストで疲れ果ててしまう
  - よくないマイクロマネジメントは自己管理や改善チャレンジの精神を損なう
  - やりたい改善はメンバーが各自すぐさまチャレンジできる制度を作る
  - たとえばスプリントの20%は改善活動に取り組んでよしという姿勢でやる
  - ちょっとした時間にはやれない大きい改善ならバックログにのせても良い

* 10 Done の定義

- プロダクトごとに決定されているもの
  - 例
    - [ ] プロダクトオーナーの仕様レビューを通過していること
    - [ ] QAレビューを通過していること
    - [ ] 追加したコードのテストケースが追加されていること
    - [ ] 追加したコードのカバレッジが80%以上であること
- Done の定義が弱いと、そのままリリースできない
- ドキュメントを書くとかテストをするとかの Undone work が発生する
- Undone work はリリースしない期間が長引くほど重くなっていく
  - 見積とかしてないので全量が把握できない
- 対策としては下記のものがあるが一時しのぎに過ぎずいつまでも改善しない
  - Undone work 専門チーム -> feature チームに参加して一緒にやるべき
  - Undone work だけやるスプリント
- 一番いいのは Done の定義に組み込むこと
- 感想
  - Done の定義が細かく決まってるとめちゃくちゃめんどくさいなというのは思う
    - 条件付きにするとかなのかなぁ
  - QA チームは Undone work 専門チームになりがちなので注意がいるらしい
  - Done の定義が細かく決まってないと、リリースできる品質が開発者によってぶれるのでバグが出る

* 11 バックログリファインメント(PBR)

- リファインメントはプロダクトオーナー、顧客、開発者みんな集まってやる
  - それぞれの限られた知識で実現可能なことを考えてしまうことを避けるため
  - 担当者が次々とドキュメントをリレーするコストをゼロにするため
- リファインメントの種類
  - 最初にでかいリファインメント…2日くらいかかってもいいのでビジョン共有
  - スプリントの冒頭でオーバーオールリファインメント…チームの代表者（ランダム）が集まって自分のチームがやるバックログを相談
  - 2-3チームの混合リファインメント…バックログの分解とか色々、互いのチームの知識を分け合うためチーム混合にする
  - 単独チームリファインメント…やるべきバックログが決まったあとにやる
